# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetPermissionResult',
    'AwaitableGetPermissionResult',
    'get_permission',
    'get_permission_output',
]

@pulumi.output_type
class GetPermissionResult:
    """
    A collection of values returned by getPermission.
    """
    def __init__(__self__, add_reactions=None, administrator=None, allow_bits=None, allow_extends=None, attach_files=None, ban_members=None, change_nickname=None, connect=None, create_events=None, create_expressions=None, create_instant_invite=None, create_private_threads=None, create_public_threads=None, deafen_members=None, deny_bits=None, deny_extends=None, embed_links=None, id=None, kick_members=None, manage_channels=None, manage_emojis=None, manage_events=None, manage_guild=None, manage_messages=None, manage_nicknames=None, manage_roles=None, manage_threads=None, manage_webhooks=None, mention_everyone=None, moderate_members=None, move_members=None, mute_members=None, priority_speaker=None, read_message_history=None, request_to_speak=None, send_messages=None, send_thread_messages=None, send_tts_messages=None, send_voice_messages=None, speak=None, start_embedded_activities=None, stream=None, use_application_commands=None, use_external_emojis=None, use_external_sounds=None, use_external_stickers=None, use_soundboard=None, use_vad=None, view_audit_log=None, view_channel=None, view_guild_insights=None, view_monetization_analytics=None):
        if add_reactions and not isinstance(add_reactions, str):
            raise TypeError("Expected argument 'add_reactions' to be a str")
        pulumi.set(__self__, "add_reactions", add_reactions)
        if administrator and not isinstance(administrator, str):
            raise TypeError("Expected argument 'administrator' to be a str")
        pulumi.set(__self__, "administrator", administrator)
        if allow_bits and not isinstance(allow_bits, float):
            raise TypeError("Expected argument 'allow_bits' to be a float")
        pulumi.set(__self__, "allow_bits", allow_bits)
        if allow_extends and not isinstance(allow_extends, float):
            raise TypeError("Expected argument 'allow_extends' to be a float")
        pulumi.set(__self__, "allow_extends", allow_extends)
        if attach_files and not isinstance(attach_files, str):
            raise TypeError("Expected argument 'attach_files' to be a str")
        pulumi.set(__self__, "attach_files", attach_files)
        if ban_members and not isinstance(ban_members, str):
            raise TypeError("Expected argument 'ban_members' to be a str")
        pulumi.set(__self__, "ban_members", ban_members)
        if change_nickname and not isinstance(change_nickname, str):
            raise TypeError("Expected argument 'change_nickname' to be a str")
        pulumi.set(__self__, "change_nickname", change_nickname)
        if connect and not isinstance(connect, str):
            raise TypeError("Expected argument 'connect' to be a str")
        pulumi.set(__self__, "connect", connect)
        if create_events and not isinstance(create_events, str):
            raise TypeError("Expected argument 'create_events' to be a str")
        pulumi.set(__self__, "create_events", create_events)
        if create_expressions and not isinstance(create_expressions, str):
            raise TypeError("Expected argument 'create_expressions' to be a str")
        pulumi.set(__self__, "create_expressions", create_expressions)
        if create_instant_invite and not isinstance(create_instant_invite, str):
            raise TypeError("Expected argument 'create_instant_invite' to be a str")
        pulumi.set(__self__, "create_instant_invite", create_instant_invite)
        if create_private_threads and not isinstance(create_private_threads, str):
            raise TypeError("Expected argument 'create_private_threads' to be a str")
        pulumi.set(__self__, "create_private_threads", create_private_threads)
        if create_public_threads and not isinstance(create_public_threads, str):
            raise TypeError("Expected argument 'create_public_threads' to be a str")
        pulumi.set(__self__, "create_public_threads", create_public_threads)
        if deafen_members and not isinstance(deafen_members, str):
            raise TypeError("Expected argument 'deafen_members' to be a str")
        pulumi.set(__self__, "deafen_members", deafen_members)
        if deny_bits and not isinstance(deny_bits, float):
            raise TypeError("Expected argument 'deny_bits' to be a float")
        pulumi.set(__self__, "deny_bits", deny_bits)
        if deny_extends and not isinstance(deny_extends, float):
            raise TypeError("Expected argument 'deny_extends' to be a float")
        pulumi.set(__self__, "deny_extends", deny_extends)
        if embed_links and not isinstance(embed_links, str):
            raise TypeError("Expected argument 'embed_links' to be a str")
        pulumi.set(__self__, "embed_links", embed_links)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if kick_members and not isinstance(kick_members, str):
            raise TypeError("Expected argument 'kick_members' to be a str")
        pulumi.set(__self__, "kick_members", kick_members)
        if manage_channels and not isinstance(manage_channels, str):
            raise TypeError("Expected argument 'manage_channels' to be a str")
        pulumi.set(__self__, "manage_channels", manage_channels)
        if manage_emojis and not isinstance(manage_emojis, str):
            raise TypeError("Expected argument 'manage_emojis' to be a str")
        pulumi.set(__self__, "manage_emojis", manage_emojis)
        if manage_events and not isinstance(manage_events, str):
            raise TypeError("Expected argument 'manage_events' to be a str")
        pulumi.set(__self__, "manage_events", manage_events)
        if manage_guild and not isinstance(manage_guild, str):
            raise TypeError("Expected argument 'manage_guild' to be a str")
        pulumi.set(__self__, "manage_guild", manage_guild)
        if manage_messages and not isinstance(manage_messages, str):
            raise TypeError("Expected argument 'manage_messages' to be a str")
        pulumi.set(__self__, "manage_messages", manage_messages)
        if manage_nicknames and not isinstance(manage_nicknames, str):
            raise TypeError("Expected argument 'manage_nicknames' to be a str")
        pulumi.set(__self__, "manage_nicknames", manage_nicknames)
        if manage_roles and not isinstance(manage_roles, str):
            raise TypeError("Expected argument 'manage_roles' to be a str")
        pulumi.set(__self__, "manage_roles", manage_roles)
        if manage_threads and not isinstance(manage_threads, str):
            raise TypeError("Expected argument 'manage_threads' to be a str")
        pulumi.set(__self__, "manage_threads", manage_threads)
        if manage_webhooks and not isinstance(manage_webhooks, str):
            raise TypeError("Expected argument 'manage_webhooks' to be a str")
        pulumi.set(__self__, "manage_webhooks", manage_webhooks)
        if mention_everyone and not isinstance(mention_everyone, str):
            raise TypeError("Expected argument 'mention_everyone' to be a str")
        pulumi.set(__self__, "mention_everyone", mention_everyone)
        if moderate_members and not isinstance(moderate_members, str):
            raise TypeError("Expected argument 'moderate_members' to be a str")
        pulumi.set(__self__, "moderate_members", moderate_members)
        if move_members and not isinstance(move_members, str):
            raise TypeError("Expected argument 'move_members' to be a str")
        pulumi.set(__self__, "move_members", move_members)
        if mute_members and not isinstance(mute_members, str):
            raise TypeError("Expected argument 'mute_members' to be a str")
        pulumi.set(__self__, "mute_members", mute_members)
        if priority_speaker and not isinstance(priority_speaker, str):
            raise TypeError("Expected argument 'priority_speaker' to be a str")
        pulumi.set(__self__, "priority_speaker", priority_speaker)
        if read_message_history and not isinstance(read_message_history, str):
            raise TypeError("Expected argument 'read_message_history' to be a str")
        pulumi.set(__self__, "read_message_history", read_message_history)
        if request_to_speak and not isinstance(request_to_speak, str):
            raise TypeError("Expected argument 'request_to_speak' to be a str")
        pulumi.set(__self__, "request_to_speak", request_to_speak)
        if send_messages and not isinstance(send_messages, str):
            raise TypeError("Expected argument 'send_messages' to be a str")
        pulumi.set(__self__, "send_messages", send_messages)
        if send_thread_messages and not isinstance(send_thread_messages, str):
            raise TypeError("Expected argument 'send_thread_messages' to be a str")
        pulumi.set(__self__, "send_thread_messages", send_thread_messages)
        if send_tts_messages and not isinstance(send_tts_messages, str):
            raise TypeError("Expected argument 'send_tts_messages' to be a str")
        pulumi.set(__self__, "send_tts_messages", send_tts_messages)
        if send_voice_messages and not isinstance(send_voice_messages, str):
            raise TypeError("Expected argument 'send_voice_messages' to be a str")
        pulumi.set(__self__, "send_voice_messages", send_voice_messages)
        if speak and not isinstance(speak, str):
            raise TypeError("Expected argument 'speak' to be a str")
        pulumi.set(__self__, "speak", speak)
        if start_embedded_activities and not isinstance(start_embedded_activities, str):
            raise TypeError("Expected argument 'start_embedded_activities' to be a str")
        pulumi.set(__self__, "start_embedded_activities", start_embedded_activities)
        if stream and not isinstance(stream, str):
            raise TypeError("Expected argument 'stream' to be a str")
        pulumi.set(__self__, "stream", stream)
        if use_application_commands and not isinstance(use_application_commands, str):
            raise TypeError("Expected argument 'use_application_commands' to be a str")
        pulumi.set(__self__, "use_application_commands", use_application_commands)
        if use_external_emojis and not isinstance(use_external_emojis, str):
            raise TypeError("Expected argument 'use_external_emojis' to be a str")
        pulumi.set(__self__, "use_external_emojis", use_external_emojis)
        if use_external_sounds and not isinstance(use_external_sounds, str):
            raise TypeError("Expected argument 'use_external_sounds' to be a str")
        pulumi.set(__self__, "use_external_sounds", use_external_sounds)
        if use_external_stickers and not isinstance(use_external_stickers, str):
            raise TypeError("Expected argument 'use_external_stickers' to be a str")
        pulumi.set(__self__, "use_external_stickers", use_external_stickers)
        if use_soundboard and not isinstance(use_soundboard, str):
            raise TypeError("Expected argument 'use_soundboard' to be a str")
        pulumi.set(__self__, "use_soundboard", use_soundboard)
        if use_vad and not isinstance(use_vad, str):
            raise TypeError("Expected argument 'use_vad' to be a str")
        pulumi.set(__self__, "use_vad", use_vad)
        if view_audit_log and not isinstance(view_audit_log, str):
            raise TypeError("Expected argument 'view_audit_log' to be a str")
        pulumi.set(__self__, "view_audit_log", view_audit_log)
        if view_channel and not isinstance(view_channel, str):
            raise TypeError("Expected argument 'view_channel' to be a str")
        pulumi.set(__self__, "view_channel", view_channel)
        if view_guild_insights and not isinstance(view_guild_insights, str):
            raise TypeError("Expected argument 'view_guild_insights' to be a str")
        pulumi.set(__self__, "view_guild_insights", view_guild_insights)
        if view_monetization_analytics and not isinstance(view_monetization_analytics, str):
            raise TypeError("Expected argument 'view_monetization_analytics' to be a str")
        pulumi.set(__self__, "view_monetization_analytics", view_monetization_analytics)

    @property
    @pulumi.getter(name="addReactions")
    def add_reactions(self) -> Optional[str]:
        return pulumi.get(self, "add_reactions")

    @property
    @pulumi.getter
    def administrator(self) -> Optional[str]:
        return pulumi.get(self, "administrator")

    @property
    @pulumi.getter(name="allowBits")
    def allow_bits(self) -> float:
        return pulumi.get(self, "allow_bits")

    @property
    @pulumi.getter(name="allowExtends")
    def allow_extends(self) -> Optional[float]:
        return pulumi.get(self, "allow_extends")

    @property
    @pulumi.getter(name="attachFiles")
    def attach_files(self) -> Optional[str]:
        return pulumi.get(self, "attach_files")

    @property
    @pulumi.getter(name="banMembers")
    def ban_members(self) -> Optional[str]:
        return pulumi.get(self, "ban_members")

    @property
    @pulumi.getter(name="changeNickname")
    def change_nickname(self) -> Optional[str]:
        return pulumi.get(self, "change_nickname")

    @property
    @pulumi.getter
    def connect(self) -> Optional[str]:
        return pulumi.get(self, "connect")

    @property
    @pulumi.getter(name="createEvents")
    def create_events(self) -> Optional[str]:
        return pulumi.get(self, "create_events")

    @property
    @pulumi.getter(name="createExpressions")
    def create_expressions(self) -> Optional[str]:
        return pulumi.get(self, "create_expressions")

    @property
    @pulumi.getter(name="createInstantInvite")
    def create_instant_invite(self) -> Optional[str]:
        return pulumi.get(self, "create_instant_invite")

    @property
    @pulumi.getter(name="createPrivateThreads")
    def create_private_threads(self) -> Optional[str]:
        return pulumi.get(self, "create_private_threads")

    @property
    @pulumi.getter(name="createPublicThreads")
    def create_public_threads(self) -> Optional[str]:
        return pulumi.get(self, "create_public_threads")

    @property
    @pulumi.getter(name="deafenMembers")
    def deafen_members(self) -> Optional[str]:
        return pulumi.get(self, "deafen_members")

    @property
    @pulumi.getter(name="denyBits")
    def deny_bits(self) -> float:
        return pulumi.get(self, "deny_bits")

    @property
    @pulumi.getter(name="denyExtends")
    def deny_extends(self) -> Optional[float]:
        return pulumi.get(self, "deny_extends")

    @property
    @pulumi.getter(name="embedLinks")
    def embed_links(self) -> Optional[str]:
        return pulumi.get(self, "embed_links")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="kickMembers")
    def kick_members(self) -> Optional[str]:
        return pulumi.get(self, "kick_members")

    @property
    @pulumi.getter(name="manageChannels")
    def manage_channels(self) -> Optional[str]:
        return pulumi.get(self, "manage_channels")

    @property
    @pulumi.getter(name="manageEmojis")
    def manage_emojis(self) -> Optional[str]:
        return pulumi.get(self, "manage_emojis")

    @property
    @pulumi.getter(name="manageEvents")
    def manage_events(self) -> Optional[str]:
        return pulumi.get(self, "manage_events")

    @property
    @pulumi.getter(name="manageGuild")
    def manage_guild(self) -> Optional[str]:
        return pulumi.get(self, "manage_guild")

    @property
    @pulumi.getter(name="manageMessages")
    def manage_messages(self) -> Optional[str]:
        return pulumi.get(self, "manage_messages")

    @property
    @pulumi.getter(name="manageNicknames")
    def manage_nicknames(self) -> Optional[str]:
        return pulumi.get(self, "manage_nicknames")

    @property
    @pulumi.getter(name="manageRoles")
    def manage_roles(self) -> Optional[str]:
        return pulumi.get(self, "manage_roles")

    @property
    @pulumi.getter(name="manageThreads")
    def manage_threads(self) -> Optional[str]:
        return pulumi.get(self, "manage_threads")

    @property
    @pulumi.getter(name="manageWebhooks")
    def manage_webhooks(self) -> Optional[str]:
        return pulumi.get(self, "manage_webhooks")

    @property
    @pulumi.getter(name="mentionEveryone")
    def mention_everyone(self) -> Optional[str]:
        return pulumi.get(self, "mention_everyone")

    @property
    @pulumi.getter(name="moderateMembers")
    def moderate_members(self) -> Optional[str]:
        return pulumi.get(self, "moderate_members")

    @property
    @pulumi.getter(name="moveMembers")
    def move_members(self) -> Optional[str]:
        return pulumi.get(self, "move_members")

    @property
    @pulumi.getter(name="muteMembers")
    def mute_members(self) -> Optional[str]:
        return pulumi.get(self, "mute_members")

    @property
    @pulumi.getter(name="prioritySpeaker")
    def priority_speaker(self) -> Optional[str]:
        return pulumi.get(self, "priority_speaker")

    @property
    @pulumi.getter(name="readMessageHistory")
    def read_message_history(self) -> Optional[str]:
        return pulumi.get(self, "read_message_history")

    @property
    @pulumi.getter(name="requestToSpeak")
    def request_to_speak(self) -> Optional[str]:
        return pulumi.get(self, "request_to_speak")

    @property
    @pulumi.getter(name="sendMessages")
    def send_messages(self) -> Optional[str]:
        return pulumi.get(self, "send_messages")

    @property
    @pulumi.getter(name="sendThreadMessages")
    def send_thread_messages(self) -> Optional[str]:
        return pulumi.get(self, "send_thread_messages")

    @property
    @pulumi.getter(name="sendTtsMessages")
    def send_tts_messages(self) -> Optional[str]:
        return pulumi.get(self, "send_tts_messages")

    @property
    @pulumi.getter(name="sendVoiceMessages")
    def send_voice_messages(self) -> Optional[str]:
        return pulumi.get(self, "send_voice_messages")

    @property
    @pulumi.getter
    def speak(self) -> Optional[str]:
        return pulumi.get(self, "speak")

    @property
    @pulumi.getter(name="startEmbeddedActivities")
    def start_embedded_activities(self) -> Optional[str]:
        return pulumi.get(self, "start_embedded_activities")

    @property
    @pulumi.getter
    def stream(self) -> Optional[str]:
        return pulumi.get(self, "stream")

    @property
    @pulumi.getter(name="useApplicationCommands")
    def use_application_commands(self) -> Optional[str]:
        return pulumi.get(self, "use_application_commands")

    @property
    @pulumi.getter(name="useExternalEmojis")
    def use_external_emojis(self) -> Optional[str]:
        return pulumi.get(self, "use_external_emojis")

    @property
    @pulumi.getter(name="useExternalSounds")
    def use_external_sounds(self) -> Optional[str]:
        return pulumi.get(self, "use_external_sounds")

    @property
    @pulumi.getter(name="useExternalStickers")
    def use_external_stickers(self) -> Optional[str]:
        return pulumi.get(self, "use_external_stickers")

    @property
    @pulumi.getter(name="useSoundboard")
    def use_soundboard(self) -> Optional[str]:
        return pulumi.get(self, "use_soundboard")

    @property
    @pulumi.getter(name="useVad")
    def use_vad(self) -> Optional[str]:
        return pulumi.get(self, "use_vad")

    @property
    @pulumi.getter(name="viewAuditLog")
    def view_audit_log(self) -> Optional[str]:
        return pulumi.get(self, "view_audit_log")

    @property
    @pulumi.getter(name="viewChannel")
    def view_channel(self) -> Optional[str]:
        return pulumi.get(self, "view_channel")

    @property
    @pulumi.getter(name="viewGuildInsights")
    def view_guild_insights(self) -> Optional[str]:
        return pulumi.get(self, "view_guild_insights")

    @property
    @pulumi.getter(name="viewMonetizationAnalytics")
    def view_monetization_analytics(self) -> Optional[str]:
        return pulumi.get(self, "view_monetization_analytics")


class AwaitableGetPermissionResult(GetPermissionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPermissionResult(
            add_reactions=self.add_reactions,
            administrator=self.administrator,
            allow_bits=self.allow_bits,
            allow_extends=self.allow_extends,
            attach_files=self.attach_files,
            ban_members=self.ban_members,
            change_nickname=self.change_nickname,
            connect=self.connect,
            create_events=self.create_events,
            create_expressions=self.create_expressions,
            create_instant_invite=self.create_instant_invite,
            create_private_threads=self.create_private_threads,
            create_public_threads=self.create_public_threads,
            deafen_members=self.deafen_members,
            deny_bits=self.deny_bits,
            deny_extends=self.deny_extends,
            embed_links=self.embed_links,
            id=self.id,
            kick_members=self.kick_members,
            manage_channels=self.manage_channels,
            manage_emojis=self.manage_emojis,
            manage_events=self.manage_events,
            manage_guild=self.manage_guild,
            manage_messages=self.manage_messages,
            manage_nicknames=self.manage_nicknames,
            manage_roles=self.manage_roles,
            manage_threads=self.manage_threads,
            manage_webhooks=self.manage_webhooks,
            mention_everyone=self.mention_everyone,
            moderate_members=self.moderate_members,
            move_members=self.move_members,
            mute_members=self.mute_members,
            priority_speaker=self.priority_speaker,
            read_message_history=self.read_message_history,
            request_to_speak=self.request_to_speak,
            send_messages=self.send_messages,
            send_thread_messages=self.send_thread_messages,
            send_tts_messages=self.send_tts_messages,
            send_voice_messages=self.send_voice_messages,
            speak=self.speak,
            start_embedded_activities=self.start_embedded_activities,
            stream=self.stream,
            use_application_commands=self.use_application_commands,
            use_external_emojis=self.use_external_emojis,
            use_external_sounds=self.use_external_sounds,
            use_external_stickers=self.use_external_stickers,
            use_soundboard=self.use_soundboard,
            use_vad=self.use_vad,
            view_audit_log=self.view_audit_log,
            view_channel=self.view_channel,
            view_guild_insights=self.view_guild_insights,
            view_monetization_analytics=self.view_monetization_analytics)


def get_permission(add_reactions: Optional[str] = None,
                   administrator: Optional[str] = None,
                   allow_extends: Optional[float] = None,
                   attach_files: Optional[str] = None,
                   ban_members: Optional[str] = None,
                   change_nickname: Optional[str] = None,
                   connect: Optional[str] = None,
                   create_events: Optional[str] = None,
                   create_expressions: Optional[str] = None,
                   create_instant_invite: Optional[str] = None,
                   create_private_threads: Optional[str] = None,
                   create_public_threads: Optional[str] = None,
                   deafen_members: Optional[str] = None,
                   deny_extends: Optional[float] = None,
                   embed_links: Optional[str] = None,
                   id: Optional[str] = None,
                   kick_members: Optional[str] = None,
                   manage_channels: Optional[str] = None,
                   manage_emojis: Optional[str] = None,
                   manage_events: Optional[str] = None,
                   manage_guild: Optional[str] = None,
                   manage_messages: Optional[str] = None,
                   manage_nicknames: Optional[str] = None,
                   manage_roles: Optional[str] = None,
                   manage_threads: Optional[str] = None,
                   manage_webhooks: Optional[str] = None,
                   mention_everyone: Optional[str] = None,
                   moderate_members: Optional[str] = None,
                   move_members: Optional[str] = None,
                   mute_members: Optional[str] = None,
                   priority_speaker: Optional[str] = None,
                   read_message_history: Optional[str] = None,
                   request_to_speak: Optional[str] = None,
                   send_messages: Optional[str] = None,
                   send_thread_messages: Optional[str] = None,
                   send_tts_messages: Optional[str] = None,
                   send_voice_messages: Optional[str] = None,
                   speak: Optional[str] = None,
                   start_embedded_activities: Optional[str] = None,
                   stream: Optional[str] = None,
                   use_application_commands: Optional[str] = None,
                   use_external_emojis: Optional[str] = None,
                   use_external_sounds: Optional[str] = None,
                   use_external_stickers: Optional[str] = None,
                   use_soundboard: Optional[str] = None,
                   use_vad: Optional[str] = None,
                   view_audit_log: Optional[str] = None,
                   view_channel: Optional[str] = None,
                   view_guild_insights: Optional[str] = None,
                   view_monetization_analytics: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPermissionResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['addReactions'] = add_reactions
    __args__['administrator'] = administrator
    __args__['allowExtends'] = allow_extends
    __args__['attachFiles'] = attach_files
    __args__['banMembers'] = ban_members
    __args__['changeNickname'] = change_nickname
    __args__['connect'] = connect
    __args__['createEvents'] = create_events
    __args__['createExpressions'] = create_expressions
    __args__['createInstantInvite'] = create_instant_invite
    __args__['createPrivateThreads'] = create_private_threads
    __args__['createPublicThreads'] = create_public_threads
    __args__['deafenMembers'] = deafen_members
    __args__['denyExtends'] = deny_extends
    __args__['embedLinks'] = embed_links
    __args__['id'] = id
    __args__['kickMembers'] = kick_members
    __args__['manageChannels'] = manage_channels
    __args__['manageEmojis'] = manage_emojis
    __args__['manageEvents'] = manage_events
    __args__['manageGuild'] = manage_guild
    __args__['manageMessages'] = manage_messages
    __args__['manageNicknames'] = manage_nicknames
    __args__['manageRoles'] = manage_roles
    __args__['manageThreads'] = manage_threads
    __args__['manageWebhooks'] = manage_webhooks
    __args__['mentionEveryone'] = mention_everyone
    __args__['moderateMembers'] = moderate_members
    __args__['moveMembers'] = move_members
    __args__['muteMembers'] = mute_members
    __args__['prioritySpeaker'] = priority_speaker
    __args__['readMessageHistory'] = read_message_history
    __args__['requestToSpeak'] = request_to_speak
    __args__['sendMessages'] = send_messages
    __args__['sendThreadMessages'] = send_thread_messages
    __args__['sendTtsMessages'] = send_tts_messages
    __args__['sendVoiceMessages'] = send_voice_messages
    __args__['speak'] = speak
    __args__['startEmbeddedActivities'] = start_embedded_activities
    __args__['stream'] = stream
    __args__['useApplicationCommands'] = use_application_commands
    __args__['useExternalEmojis'] = use_external_emojis
    __args__['useExternalSounds'] = use_external_sounds
    __args__['useExternalStickers'] = use_external_stickers
    __args__['useSoundboard'] = use_soundboard
    __args__['useVad'] = use_vad
    __args__['viewAuditLog'] = view_audit_log
    __args__['viewChannel'] = view_channel
    __args__['viewGuildInsights'] = view_guild_insights
    __args__['viewMonetizationAnalytics'] = view_monetization_analytics
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('discord:index/getPermission:getPermission', __args__, opts=opts, typ=GetPermissionResult, package_ref=_utilities.get_package()).value

    return AwaitableGetPermissionResult(
        add_reactions=pulumi.get(__ret__, 'add_reactions'),
        administrator=pulumi.get(__ret__, 'administrator'),
        allow_bits=pulumi.get(__ret__, 'allow_bits'),
        allow_extends=pulumi.get(__ret__, 'allow_extends'),
        attach_files=pulumi.get(__ret__, 'attach_files'),
        ban_members=pulumi.get(__ret__, 'ban_members'),
        change_nickname=pulumi.get(__ret__, 'change_nickname'),
        connect=pulumi.get(__ret__, 'connect'),
        create_events=pulumi.get(__ret__, 'create_events'),
        create_expressions=pulumi.get(__ret__, 'create_expressions'),
        create_instant_invite=pulumi.get(__ret__, 'create_instant_invite'),
        create_private_threads=pulumi.get(__ret__, 'create_private_threads'),
        create_public_threads=pulumi.get(__ret__, 'create_public_threads'),
        deafen_members=pulumi.get(__ret__, 'deafen_members'),
        deny_bits=pulumi.get(__ret__, 'deny_bits'),
        deny_extends=pulumi.get(__ret__, 'deny_extends'),
        embed_links=pulumi.get(__ret__, 'embed_links'),
        id=pulumi.get(__ret__, 'id'),
        kick_members=pulumi.get(__ret__, 'kick_members'),
        manage_channels=pulumi.get(__ret__, 'manage_channels'),
        manage_emojis=pulumi.get(__ret__, 'manage_emojis'),
        manage_events=pulumi.get(__ret__, 'manage_events'),
        manage_guild=pulumi.get(__ret__, 'manage_guild'),
        manage_messages=pulumi.get(__ret__, 'manage_messages'),
        manage_nicknames=pulumi.get(__ret__, 'manage_nicknames'),
        manage_roles=pulumi.get(__ret__, 'manage_roles'),
        manage_threads=pulumi.get(__ret__, 'manage_threads'),
        manage_webhooks=pulumi.get(__ret__, 'manage_webhooks'),
        mention_everyone=pulumi.get(__ret__, 'mention_everyone'),
        moderate_members=pulumi.get(__ret__, 'moderate_members'),
        move_members=pulumi.get(__ret__, 'move_members'),
        mute_members=pulumi.get(__ret__, 'mute_members'),
        priority_speaker=pulumi.get(__ret__, 'priority_speaker'),
        read_message_history=pulumi.get(__ret__, 'read_message_history'),
        request_to_speak=pulumi.get(__ret__, 'request_to_speak'),
        send_messages=pulumi.get(__ret__, 'send_messages'),
        send_thread_messages=pulumi.get(__ret__, 'send_thread_messages'),
        send_tts_messages=pulumi.get(__ret__, 'send_tts_messages'),
        send_voice_messages=pulumi.get(__ret__, 'send_voice_messages'),
        speak=pulumi.get(__ret__, 'speak'),
        start_embedded_activities=pulumi.get(__ret__, 'start_embedded_activities'),
        stream=pulumi.get(__ret__, 'stream'),
        use_application_commands=pulumi.get(__ret__, 'use_application_commands'),
        use_external_emojis=pulumi.get(__ret__, 'use_external_emojis'),
        use_external_sounds=pulumi.get(__ret__, 'use_external_sounds'),
        use_external_stickers=pulumi.get(__ret__, 'use_external_stickers'),
        use_soundboard=pulumi.get(__ret__, 'use_soundboard'),
        use_vad=pulumi.get(__ret__, 'use_vad'),
        view_audit_log=pulumi.get(__ret__, 'view_audit_log'),
        view_channel=pulumi.get(__ret__, 'view_channel'),
        view_guild_insights=pulumi.get(__ret__, 'view_guild_insights'),
        view_monetization_analytics=pulumi.get(__ret__, 'view_monetization_analytics'))
def get_permission_output(add_reactions: Optional[pulumi.Input[Optional[str]]] = None,
                          administrator: Optional[pulumi.Input[Optional[str]]] = None,
                          allow_extends: Optional[pulumi.Input[Optional[float]]] = None,
                          attach_files: Optional[pulumi.Input[Optional[str]]] = None,
                          ban_members: Optional[pulumi.Input[Optional[str]]] = None,
                          change_nickname: Optional[pulumi.Input[Optional[str]]] = None,
                          connect: Optional[pulumi.Input[Optional[str]]] = None,
                          create_events: Optional[pulumi.Input[Optional[str]]] = None,
                          create_expressions: Optional[pulumi.Input[Optional[str]]] = None,
                          create_instant_invite: Optional[pulumi.Input[Optional[str]]] = None,
                          create_private_threads: Optional[pulumi.Input[Optional[str]]] = None,
                          create_public_threads: Optional[pulumi.Input[Optional[str]]] = None,
                          deafen_members: Optional[pulumi.Input[Optional[str]]] = None,
                          deny_extends: Optional[pulumi.Input[Optional[float]]] = None,
                          embed_links: Optional[pulumi.Input[Optional[str]]] = None,
                          id: Optional[pulumi.Input[Optional[str]]] = None,
                          kick_members: Optional[pulumi.Input[Optional[str]]] = None,
                          manage_channels: Optional[pulumi.Input[Optional[str]]] = None,
                          manage_emojis: Optional[pulumi.Input[Optional[str]]] = None,
                          manage_events: Optional[pulumi.Input[Optional[str]]] = None,
                          manage_guild: Optional[pulumi.Input[Optional[str]]] = None,
                          manage_messages: Optional[pulumi.Input[Optional[str]]] = None,
                          manage_nicknames: Optional[pulumi.Input[Optional[str]]] = None,
                          manage_roles: Optional[pulumi.Input[Optional[str]]] = None,
                          manage_threads: Optional[pulumi.Input[Optional[str]]] = None,
                          manage_webhooks: Optional[pulumi.Input[Optional[str]]] = None,
                          mention_everyone: Optional[pulumi.Input[Optional[str]]] = None,
                          moderate_members: Optional[pulumi.Input[Optional[str]]] = None,
                          move_members: Optional[pulumi.Input[Optional[str]]] = None,
                          mute_members: Optional[pulumi.Input[Optional[str]]] = None,
                          priority_speaker: Optional[pulumi.Input[Optional[str]]] = None,
                          read_message_history: Optional[pulumi.Input[Optional[str]]] = None,
                          request_to_speak: Optional[pulumi.Input[Optional[str]]] = None,
                          send_messages: Optional[pulumi.Input[Optional[str]]] = None,
                          send_thread_messages: Optional[pulumi.Input[Optional[str]]] = None,
                          send_tts_messages: Optional[pulumi.Input[Optional[str]]] = None,
                          send_voice_messages: Optional[pulumi.Input[Optional[str]]] = None,
                          speak: Optional[pulumi.Input[Optional[str]]] = None,
                          start_embedded_activities: Optional[pulumi.Input[Optional[str]]] = None,
                          stream: Optional[pulumi.Input[Optional[str]]] = None,
                          use_application_commands: Optional[pulumi.Input[Optional[str]]] = None,
                          use_external_emojis: Optional[pulumi.Input[Optional[str]]] = None,
                          use_external_sounds: Optional[pulumi.Input[Optional[str]]] = None,
                          use_external_stickers: Optional[pulumi.Input[Optional[str]]] = None,
                          use_soundboard: Optional[pulumi.Input[Optional[str]]] = None,
                          use_vad: Optional[pulumi.Input[Optional[str]]] = None,
                          view_audit_log: Optional[pulumi.Input[Optional[str]]] = None,
                          view_channel: Optional[pulumi.Input[Optional[str]]] = None,
                          view_guild_insights: Optional[pulumi.Input[Optional[str]]] = None,
                          view_monetization_analytics: Optional[pulumi.Input[Optional[str]]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPermissionResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['addReactions'] = add_reactions
    __args__['administrator'] = administrator
    __args__['allowExtends'] = allow_extends
    __args__['attachFiles'] = attach_files
    __args__['banMembers'] = ban_members
    __args__['changeNickname'] = change_nickname
    __args__['connect'] = connect
    __args__['createEvents'] = create_events
    __args__['createExpressions'] = create_expressions
    __args__['createInstantInvite'] = create_instant_invite
    __args__['createPrivateThreads'] = create_private_threads
    __args__['createPublicThreads'] = create_public_threads
    __args__['deafenMembers'] = deafen_members
    __args__['denyExtends'] = deny_extends
    __args__['embedLinks'] = embed_links
    __args__['id'] = id
    __args__['kickMembers'] = kick_members
    __args__['manageChannels'] = manage_channels
    __args__['manageEmojis'] = manage_emojis
    __args__['manageEvents'] = manage_events
    __args__['manageGuild'] = manage_guild
    __args__['manageMessages'] = manage_messages
    __args__['manageNicknames'] = manage_nicknames
    __args__['manageRoles'] = manage_roles
    __args__['manageThreads'] = manage_threads
    __args__['manageWebhooks'] = manage_webhooks
    __args__['mentionEveryone'] = mention_everyone
    __args__['moderateMembers'] = moderate_members
    __args__['moveMembers'] = move_members
    __args__['muteMembers'] = mute_members
    __args__['prioritySpeaker'] = priority_speaker
    __args__['readMessageHistory'] = read_message_history
    __args__['requestToSpeak'] = request_to_speak
    __args__['sendMessages'] = send_messages
    __args__['sendThreadMessages'] = send_thread_messages
    __args__['sendTtsMessages'] = send_tts_messages
    __args__['sendVoiceMessages'] = send_voice_messages
    __args__['speak'] = speak
    __args__['startEmbeddedActivities'] = start_embedded_activities
    __args__['stream'] = stream
    __args__['useApplicationCommands'] = use_application_commands
    __args__['useExternalEmojis'] = use_external_emojis
    __args__['useExternalSounds'] = use_external_sounds
    __args__['useExternalStickers'] = use_external_stickers
    __args__['useSoundboard'] = use_soundboard
    __args__['useVad'] = use_vad
    __args__['viewAuditLog'] = view_audit_log
    __args__['viewChannel'] = view_channel
    __args__['viewGuildInsights'] = view_guild_insights
    __args__['viewMonetizationAnalytics'] = view_monetization_analytics
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('discord:index/getPermission:getPermission', __args__, opts=opts, typ=GetPermissionResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetPermissionResult(
        add_reactions=pulumi.get(__response__, 'add_reactions'),
        administrator=pulumi.get(__response__, 'administrator'),
        allow_bits=pulumi.get(__response__, 'allow_bits'),
        allow_extends=pulumi.get(__response__, 'allow_extends'),
        attach_files=pulumi.get(__response__, 'attach_files'),
        ban_members=pulumi.get(__response__, 'ban_members'),
        change_nickname=pulumi.get(__response__, 'change_nickname'),
        connect=pulumi.get(__response__, 'connect'),
        create_events=pulumi.get(__response__, 'create_events'),
        create_expressions=pulumi.get(__response__, 'create_expressions'),
        create_instant_invite=pulumi.get(__response__, 'create_instant_invite'),
        create_private_threads=pulumi.get(__response__, 'create_private_threads'),
        create_public_threads=pulumi.get(__response__, 'create_public_threads'),
        deafen_members=pulumi.get(__response__, 'deafen_members'),
        deny_bits=pulumi.get(__response__, 'deny_bits'),
        deny_extends=pulumi.get(__response__, 'deny_extends'),
        embed_links=pulumi.get(__response__, 'embed_links'),
        id=pulumi.get(__response__, 'id'),
        kick_members=pulumi.get(__response__, 'kick_members'),
        manage_channels=pulumi.get(__response__, 'manage_channels'),
        manage_emojis=pulumi.get(__response__, 'manage_emojis'),
        manage_events=pulumi.get(__response__, 'manage_events'),
        manage_guild=pulumi.get(__response__, 'manage_guild'),
        manage_messages=pulumi.get(__response__, 'manage_messages'),
        manage_nicknames=pulumi.get(__response__, 'manage_nicknames'),
        manage_roles=pulumi.get(__response__, 'manage_roles'),
        manage_threads=pulumi.get(__response__, 'manage_threads'),
        manage_webhooks=pulumi.get(__response__, 'manage_webhooks'),
        mention_everyone=pulumi.get(__response__, 'mention_everyone'),
        moderate_members=pulumi.get(__response__, 'moderate_members'),
        move_members=pulumi.get(__response__, 'move_members'),
        mute_members=pulumi.get(__response__, 'mute_members'),
        priority_speaker=pulumi.get(__response__, 'priority_speaker'),
        read_message_history=pulumi.get(__response__, 'read_message_history'),
        request_to_speak=pulumi.get(__response__, 'request_to_speak'),
        send_messages=pulumi.get(__response__, 'send_messages'),
        send_thread_messages=pulumi.get(__response__, 'send_thread_messages'),
        send_tts_messages=pulumi.get(__response__, 'send_tts_messages'),
        send_voice_messages=pulumi.get(__response__, 'send_voice_messages'),
        speak=pulumi.get(__response__, 'speak'),
        start_embedded_activities=pulumi.get(__response__, 'start_embedded_activities'),
        stream=pulumi.get(__response__, 'stream'),
        use_application_commands=pulumi.get(__response__, 'use_application_commands'),
        use_external_emojis=pulumi.get(__response__, 'use_external_emojis'),
        use_external_sounds=pulumi.get(__response__, 'use_external_sounds'),
        use_external_stickers=pulumi.get(__response__, 'use_external_stickers'),
        use_soundboard=pulumi.get(__response__, 'use_soundboard'),
        use_vad=pulumi.get(__response__, 'use_vad'),
        view_audit_log=pulumi.get(__response__, 'view_audit_log'),
        view_channel=pulumi.get(__response__, 'view_channel'),
        view_guild_insights=pulumi.get(__response__, 'view_guild_insights'),
        view_monetization_analytics=pulumi.get(__response__, 'view_monetization_analytics')))
