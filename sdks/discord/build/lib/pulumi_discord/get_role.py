# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetRoleResult',
    'AwaitableGetRoleResult',
    'get_role',
    'get_role_output',
]

@pulumi.output_type
class GetRoleResult:
    """
    A collection of values returned by getRole.
    """
    def __init__(__self__, color=None, hoist=None, id=None, managed=None, mentionable=None, name=None, permissions=None, position=None, role_id=None, server_id=None):
        if color and not isinstance(color, float):
            raise TypeError("Expected argument 'color' to be a float")
        pulumi.set(__self__, "color", color)
        if hoist and not isinstance(hoist, bool):
            raise TypeError("Expected argument 'hoist' to be a bool")
        pulumi.set(__self__, "hoist", hoist)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if managed and not isinstance(managed, bool):
            raise TypeError("Expected argument 'managed' to be a bool")
        pulumi.set(__self__, "managed", managed)
        if mentionable and not isinstance(mentionable, bool):
            raise TypeError("Expected argument 'mentionable' to be a bool")
        pulumi.set(__self__, "mentionable", mentionable)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if permissions and not isinstance(permissions, float):
            raise TypeError("Expected argument 'permissions' to be a float")
        pulumi.set(__self__, "permissions", permissions)
        if position and not isinstance(position, float):
            raise TypeError("Expected argument 'position' to be a float")
        pulumi.set(__self__, "position", position)
        if role_id and not isinstance(role_id, str):
            raise TypeError("Expected argument 'role_id' to be a str")
        pulumi.set(__self__, "role_id", role_id)
        if server_id and not isinstance(server_id, str):
            raise TypeError("Expected argument 'server_id' to be a str")
        pulumi.set(__self__, "server_id", server_id)

    @property
    @pulumi.getter
    def color(self) -> float:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter
    def hoist(self) -> bool:
        return pulumi.get(self, "hoist")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def managed(self) -> bool:
        return pulumi.get(self, "managed")

    @property
    @pulumi.getter
    def mentionable(self) -> bool:
        return pulumi.get(self, "mentionable")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def permissions(self) -> float:
        return pulumi.get(self, "permissions")

    @property
    @pulumi.getter
    def position(self) -> float:
        return pulumi.get(self, "position")

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> Optional[str]:
        return pulumi.get(self, "role_id")

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> str:
        return pulumi.get(self, "server_id")


class AwaitableGetRoleResult(GetRoleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRoleResult(
            color=self.color,
            hoist=self.hoist,
            id=self.id,
            managed=self.managed,
            mentionable=self.mentionable,
            name=self.name,
            permissions=self.permissions,
            position=self.position,
            role_id=self.role_id,
            server_id=self.server_id)


def get_role(name: Optional[str] = None,
             role_id: Optional[str] = None,
             server_id: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRoleResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['roleId'] = role_id
    __args__['serverId'] = server_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('discord:index/getRole:getRole', __args__, opts=opts, typ=GetRoleResult, package_ref=_utilities.get_package()).value

    return AwaitableGetRoleResult(
        color=pulumi.get(__ret__, 'color'),
        hoist=pulumi.get(__ret__, 'hoist'),
        id=pulumi.get(__ret__, 'id'),
        managed=pulumi.get(__ret__, 'managed'),
        mentionable=pulumi.get(__ret__, 'mentionable'),
        name=pulumi.get(__ret__, 'name'),
        permissions=pulumi.get(__ret__, 'permissions'),
        position=pulumi.get(__ret__, 'position'),
        role_id=pulumi.get(__ret__, 'role_id'),
        server_id=pulumi.get(__ret__, 'server_id'))
def get_role_output(name: Optional[pulumi.Input[Optional[str]]] = None,
                    role_id: Optional[pulumi.Input[Optional[str]]] = None,
                    server_id: Optional[pulumi.Input[str]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRoleResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['roleId'] = role_id
    __args__['serverId'] = server_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('discord:index/getRole:getRole', __args__, opts=opts, typ=GetRoleResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetRoleResult(
        color=pulumi.get(__response__, 'color'),
        hoist=pulumi.get(__response__, 'hoist'),
        id=pulumi.get(__response__, 'id'),
        managed=pulumi.get(__response__, 'managed'),
        mentionable=pulumi.get(__response__, 'mentionable'),
        name=pulumi.get(__response__, 'name'),
        permissions=pulumi.get(__response__, 'permissions'),
        position=pulumi.get(__response__, 'position'),
        role_id=pulumi.get(__response__, 'role_id'),
        server_id=pulumi.get(__response__, 'server_id')))
