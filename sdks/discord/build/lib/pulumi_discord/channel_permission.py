# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ChannelPermissionArgs', 'ChannelPermission']

@pulumi.input_type
class ChannelPermissionArgs:
    def __init__(__self__, *,
                 channel_id: pulumi.Input[str],
                 overwrite_id: pulumi.Input[str],
                 type: pulumi.Input[str],
                 allow: Optional[pulumi.Input[float]] = None,
                 deny: Optional[pulumi.Input[float]] = None):
        """
        The set of arguments for constructing a ChannelPermission resource.
        :param pulumi.Input[str] channel_id: ID of the channel for this override.
        :param pulumi.Input[str] overwrite_id: ID of the user or role for this override.
        :param pulumi.Input[str] type: Type of the override. Must be `role` or `user`.
        :param pulumi.Input[float] allow: Permission bits for the allowed permissions on this override. At least one of `allow` or `deny` must be set.
        :param pulumi.Input[float] deny: Permission bits for the denied permissions on this override. At least one of `allow` or `deny` must be set.
        """
        pulumi.set(__self__, "channel_id", channel_id)
        pulumi.set(__self__, "overwrite_id", overwrite_id)
        pulumi.set(__self__, "type", type)
        if allow is not None:
            pulumi.set(__self__, "allow", allow)
        if deny is not None:
            pulumi.set(__self__, "deny", deny)

    @property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> pulumi.Input[str]:
        """
        ID of the channel for this override.
        """
        return pulumi.get(self, "channel_id")

    @channel_id.setter
    def channel_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "channel_id", value)

    @property
    @pulumi.getter(name="overwriteId")
    def overwrite_id(self) -> pulumi.Input[str]:
        """
        ID of the user or role for this override.
        """
        return pulumi.get(self, "overwrite_id")

    @overwrite_id.setter
    def overwrite_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "overwrite_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of the override. Must be `role` or `user`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def allow(self) -> Optional[pulumi.Input[float]]:
        """
        Permission bits for the allowed permissions on this override. At least one of `allow` or `deny` must be set.
        """
        return pulumi.get(self, "allow")

    @allow.setter
    def allow(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "allow", value)

    @property
    @pulumi.getter
    def deny(self) -> Optional[pulumi.Input[float]]:
        """
        Permission bits for the denied permissions on this override. At least one of `allow` or `deny` must be set.
        """
        return pulumi.get(self, "deny")

    @deny.setter
    def deny(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "deny", value)


@pulumi.input_type
class _ChannelPermissionState:
    def __init__(__self__, *,
                 allow: Optional[pulumi.Input[float]] = None,
                 channel_id: Optional[pulumi.Input[str]] = None,
                 deny: Optional[pulumi.Input[float]] = None,
                 overwrite_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ChannelPermission resources.
        :param pulumi.Input[float] allow: Permission bits for the allowed permissions on this override. At least one of `allow` or `deny` must be set.
        :param pulumi.Input[str] channel_id: ID of the channel for this override.
        :param pulumi.Input[float] deny: Permission bits for the denied permissions on this override. At least one of `allow` or `deny` must be set.
        :param pulumi.Input[str] overwrite_id: ID of the user or role for this override.
        :param pulumi.Input[str] type: Type of the override. Must be `role` or `user`.
        """
        if allow is not None:
            pulumi.set(__self__, "allow", allow)
        if channel_id is not None:
            pulumi.set(__self__, "channel_id", channel_id)
        if deny is not None:
            pulumi.set(__self__, "deny", deny)
        if overwrite_id is not None:
            pulumi.set(__self__, "overwrite_id", overwrite_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def allow(self) -> Optional[pulumi.Input[float]]:
        """
        Permission bits for the allowed permissions on this override. At least one of `allow` or `deny` must be set.
        """
        return pulumi.get(self, "allow")

    @allow.setter
    def allow(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "allow", value)

    @property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the channel for this override.
        """
        return pulumi.get(self, "channel_id")

    @channel_id.setter
    def channel_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_id", value)

    @property
    @pulumi.getter
    def deny(self) -> Optional[pulumi.Input[float]]:
        """
        Permission bits for the denied permissions on this override. At least one of `allow` or `deny` must be set.
        """
        return pulumi.get(self, "deny")

    @deny.setter
    def deny(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "deny", value)

    @property
    @pulumi.getter(name="overwriteId")
    def overwrite_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the user or role for this override.
        """
        return pulumi.get(self, "overwrite_id")

    @overwrite_id.setter
    def overwrite_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "overwrite_id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the override. Must be `role` or `user`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class ChannelPermission(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow: Optional[pulumi.Input[float]] = None,
                 channel_id: Optional[pulumi.Input[str]] = None,
                 deny: Optional[pulumi.Input[float]] = None,
                 overwrite_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a ChannelPermission resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[float] allow: Permission bits for the allowed permissions on this override. At least one of `allow` or `deny` must be set.
        :param pulumi.Input[str] channel_id: ID of the channel for this override.
        :param pulumi.Input[float] deny: Permission bits for the denied permissions on this override. At least one of `allow` or `deny` must be set.
        :param pulumi.Input[str] overwrite_id: ID of the user or role for this override.
        :param pulumi.Input[str] type: Type of the override. Must be `role` or `user`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ChannelPermissionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ChannelPermission resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ChannelPermissionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ChannelPermissionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow: Optional[pulumi.Input[float]] = None,
                 channel_id: Optional[pulumi.Input[str]] = None,
                 deny: Optional[pulumi.Input[float]] = None,
                 overwrite_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ChannelPermissionArgs.__new__(ChannelPermissionArgs)

            __props__.__dict__["allow"] = allow
            if channel_id is None and not opts.urn:
                raise TypeError("Missing required property 'channel_id'")
            __props__.__dict__["channel_id"] = channel_id
            __props__.__dict__["deny"] = deny
            if overwrite_id is None and not opts.urn:
                raise TypeError("Missing required property 'overwrite_id'")
            __props__.__dict__["overwrite_id"] = overwrite_id
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
        super(ChannelPermission, __self__).__init__(
            'discord:index/channelPermission:ChannelPermission',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allow: Optional[pulumi.Input[float]] = None,
            channel_id: Optional[pulumi.Input[str]] = None,
            deny: Optional[pulumi.Input[float]] = None,
            overwrite_id: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'ChannelPermission':
        """
        Get an existing ChannelPermission resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[float] allow: Permission bits for the allowed permissions on this override. At least one of `allow` or `deny` must be set.
        :param pulumi.Input[str] channel_id: ID of the channel for this override.
        :param pulumi.Input[float] deny: Permission bits for the denied permissions on this override. At least one of `allow` or `deny` must be set.
        :param pulumi.Input[str] overwrite_id: ID of the user or role for this override.
        :param pulumi.Input[str] type: Type of the override. Must be `role` or `user`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ChannelPermissionState.__new__(_ChannelPermissionState)

        __props__.__dict__["allow"] = allow
        __props__.__dict__["channel_id"] = channel_id
        __props__.__dict__["deny"] = deny
        __props__.__dict__["overwrite_id"] = overwrite_id
        __props__.__dict__["type"] = type
        return ChannelPermission(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def allow(self) -> pulumi.Output[Optional[float]]:
        """
        Permission bits for the allowed permissions on this override. At least one of `allow` or `deny` must be set.
        """
        return pulumi.get(self, "allow")

    @property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> pulumi.Output[str]:
        """
        ID of the channel for this override.
        """
        return pulumi.get(self, "channel_id")

    @property
    @pulumi.getter
    def deny(self) -> pulumi.Output[Optional[float]]:
        """
        Permission bits for the denied permissions on this override. At least one of `allow` or `deny` must be set.
        """
        return pulumi.get(self, "deny")

    @property
    @pulumi.getter(name="overwriteId")
    def overwrite_id(self) -> pulumi.Output[str]:
        """
        ID of the user or role for this override.
        """
        return pulumi.get(self, "overwrite_id")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Type of the override. Must be `role` or `user`.
        """
        return pulumi.get(self, "type")

