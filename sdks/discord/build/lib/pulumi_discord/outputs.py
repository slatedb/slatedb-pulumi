# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'ManagedServerRole',
    'MemberRolesRole',
    'MessageEmbed',
    'MessageEmbedAuthor',
    'MessageEmbedField',
    'MessageEmbedFooter',
    'MessageEmbedImage',
    'MessageEmbedProvider',
    'MessageEmbedThumbnail',
    'MessageEmbedVideo',
    'ServerRole',
    'GetServerRoleResult',
]

@pulumi.output_type
class ManagedServerRole(dict):
    def __init__(__self__, *,
                 color: float,
                 hoist: bool,
                 id: str,
                 managed: bool,
                 mentionable: bool,
                 name: str,
                 permissions: float,
                 position: float):
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "hoist", hoist)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "managed", managed)
        pulumi.set(__self__, "mentionable", mentionable)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "permissions", permissions)
        pulumi.set(__self__, "position", position)

    @property
    @pulumi.getter
    def color(self) -> float:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter
    def hoist(self) -> bool:
        return pulumi.get(self, "hoist")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def managed(self) -> bool:
        return pulumi.get(self, "managed")

    @property
    @pulumi.getter
    def mentionable(self) -> bool:
        return pulumi.get(self, "mentionable")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def permissions(self) -> float:
        return pulumi.get(self, "permissions")

    @property
    @pulumi.getter
    def position(self) -> float:
        return pulumi.get(self, "position")


@pulumi.output_type
class MemberRolesRole(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "roleId":
            suggest = "role_id"
        elif key == "hasRole":
            suggest = "has_role"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MemberRolesRole. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MemberRolesRole.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MemberRolesRole.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 role_id: str,
                 has_role: Optional[bool] = None):
        """
        :param str role_id: The role ID to manage.
        :param bool has_role: Whether the user should have the role. (default `true`)
        """
        pulumi.set(__self__, "role_id", role_id)
        if has_role is not None:
            pulumi.set(__self__, "has_role", has_role)

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> str:
        """
        The role ID to manage.
        """
        return pulumi.get(self, "role_id")

    @property
    @pulumi.getter(name="hasRole")
    def has_role(self) -> Optional[bool]:
        """
        Whether the user should have the role. (default `true`)
        """
        return pulumi.get(self, "has_role")


@pulumi.output_type
class MessageEmbed(dict):
    def __init__(__self__, *,
                 author: Optional['outputs.MessageEmbedAuthor'] = None,
                 color: Optional[float] = None,
                 description: Optional[str] = None,
                 fields: Optional[Sequence['outputs.MessageEmbedField']] = None,
                 footer: Optional['outputs.MessageEmbedFooter'] = None,
                 image: Optional['outputs.MessageEmbedImage'] = None,
                 provider: Optional['outputs.MessageEmbedProvider'] = None,
                 thumbnail: Optional['outputs.MessageEmbedThumbnail'] = None,
                 timestamp: Optional[str] = None,
                 title: Optional[str] = None,
                 url: Optional[str] = None,
                 video: Optional['outputs.MessageEmbedVideo'] = None):
        """
        :param 'MessageEmbedAuthorArgs' author: Author of the embed.
        :param float color: Color of the embed. Must be an integer color code.
        :param str description: Description of the embed.
        :param Sequence['MessageEmbedFieldArgs'] fields: Fields of the embed.
        :param 'MessageEmbedFooterArgs' footer: Footer of the embed.
        :param 'MessageEmbedImageArgs' image: Image to be included in the embed.
        :param 'MessageEmbedProviderArgs' provider: Provider of the embed.
        :param 'MessageEmbedThumbnailArgs' thumbnail: Thumbnail to be included in the embed.
        :param str timestamp: Timestamp of the embed content.
        :param str title: Title of the embed.
        :param str url: URL of the embed.
        :param 'MessageEmbedVideoArgs' video: Video to be included in the embed.
        """
        if author is not None:
            pulumi.set(__self__, "author", author)
        if color is not None:
            pulumi.set(__self__, "color", color)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if fields is not None:
            pulumi.set(__self__, "fields", fields)
        if footer is not None:
            pulumi.set(__self__, "footer", footer)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if provider is not None:
            pulumi.set(__self__, "provider", provider)
        if thumbnail is not None:
            pulumi.set(__self__, "thumbnail", thumbnail)
        if timestamp is not None:
            pulumi.set(__self__, "timestamp", timestamp)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if video is not None:
            pulumi.set(__self__, "video", video)

    @property
    @pulumi.getter
    def author(self) -> Optional['outputs.MessageEmbedAuthor']:
        """
        Author of the embed.
        """
        return pulumi.get(self, "author")

    @property
    @pulumi.getter
    def color(self) -> Optional[float]:
        """
        Color of the embed. Must be an integer color code.
        """
        return pulumi.get(self, "color")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description of the embed.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def fields(self) -> Optional[Sequence['outputs.MessageEmbedField']]:
        """
        Fields of the embed.
        """
        return pulumi.get(self, "fields")

    @property
    @pulumi.getter
    def footer(self) -> Optional['outputs.MessageEmbedFooter']:
        """
        Footer of the embed.
        """
        return pulumi.get(self, "footer")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.MessageEmbedImage']:
        """
        Image to be included in the embed.
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def provider(self) -> Optional['outputs.MessageEmbedProvider']:
        """
        Provider of the embed.
        """
        return pulumi.get(self, "provider")

    @property
    @pulumi.getter
    def thumbnail(self) -> Optional['outputs.MessageEmbedThumbnail']:
        """
        Thumbnail to be included in the embed.
        """
        return pulumi.get(self, "thumbnail")

    @property
    @pulumi.getter
    def timestamp(self) -> Optional[str]:
        """
        Timestamp of the embed content.
        """
        return pulumi.get(self, "timestamp")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        Title of the embed.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        URL of the embed.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def video(self) -> Optional['outputs.MessageEmbedVideo']:
        """
        Video to be included in the embed.
        """
        return pulumi.get(self, "video")


@pulumi.output_type
class MessageEmbedAuthor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "iconUrl":
            suggest = "icon_url"
        elif key == "proxyIconUrl":
            suggest = "proxy_icon_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MessageEmbedAuthor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MessageEmbedAuthor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MessageEmbedAuthor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 icon_url: Optional[str] = None,
                 name: Optional[str] = None,
                 proxy_icon_url: Optional[str] = None,
                 url: Optional[str] = None):
        """
        :param str icon_url: URL of the author's icon.
        :param str name: Name of the author.
        :param str proxy_icon_url: URL to access the author's icon via Discord's proxy.
        :param str url: URL of the author.
        """
        if icon_url is not None:
            pulumi.set(__self__, "icon_url", icon_url)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if proxy_icon_url is not None:
            pulumi.set(__self__, "proxy_icon_url", proxy_icon_url)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="iconUrl")
    def icon_url(self) -> Optional[str]:
        """
        URL of the author's icon.
        """
        return pulumi.get(self, "icon_url")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the author.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="proxyIconUrl")
    def proxy_icon_url(self) -> Optional[str]:
        """
        URL to access the author's icon via Discord's proxy.
        """
        return pulumi.get(self, "proxy_icon_url")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        URL of the author.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class MessageEmbedField(dict):
    def __init__(__self__, *,
                 name: str,
                 inline: Optional[bool] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the field.
        :param bool inline: Whether the field is inline.
        :param str value: Value of the field.
        """
        pulumi.set(__self__, "name", name)
        if inline is not None:
            pulumi.set(__self__, "inline", inline)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the field.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def inline(self) -> Optional[bool]:
        """
        Whether the field is inline.
        """
        return pulumi.get(self, "inline")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the field.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class MessageEmbedFooter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "iconUrl":
            suggest = "icon_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MessageEmbedFooter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MessageEmbedFooter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MessageEmbedFooter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 text: str,
                 icon_url: Optional[str] = None):
        """
        :param str text: Text of the footer.
        :param str icon_url: URL to an icon to be included in the footer.
        """
        pulumi.set(__self__, "text", text)
        if icon_url is not None:
            pulumi.set(__self__, "icon_url", icon_url)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text of the footer.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter(name="iconUrl")
    def icon_url(self) -> Optional[str]:
        """
        URL to an icon to be included in the footer.
        """
        return pulumi.get(self, "icon_url")


@pulumi.output_type
class MessageEmbedImage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "proxyUrl":
            suggest = "proxy_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MessageEmbedImage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MessageEmbedImage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MessageEmbedImage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 url: str,
                 height: Optional[float] = None,
                 proxy_url: Optional[str] = None,
                 width: Optional[float] = None):
        """
        :param str url: URL of the image to be included in the embed.
        :param float height: Height of the image.
        :param str proxy_url: URL to access the image via Discord's proxy.
        :param float width: Width of the image.
        """
        pulumi.set(__self__, "url", url)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if proxy_url is not None:
            pulumi.set(__self__, "proxy_url", proxy_url)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL of the image to be included in the embed.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def height(self) -> Optional[float]:
        """
        Height of the image.
        """
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="proxyUrl")
    def proxy_url(self) -> Optional[str]:
        """
        URL to access the image via Discord's proxy.
        """
        return pulumi.get(self, "proxy_url")

    @property
    @pulumi.getter
    def width(self) -> Optional[float]:
        """
        Width of the image.
        """
        return pulumi.get(self, "width")


@pulumi.output_type
class MessageEmbedProvider(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 url: Optional[str] = None):
        """
        :param str name: Name of the provider.
        :param str url: URL of the provider.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the provider.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        URL of the provider.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class MessageEmbedThumbnail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "proxyUrl":
            suggest = "proxy_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MessageEmbedThumbnail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MessageEmbedThumbnail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MessageEmbedThumbnail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 url: str,
                 height: Optional[float] = None,
                 proxy_url: Optional[str] = None,
                 width: Optional[float] = None):
        """
        :param str url: URL of the thumbnail to be included in the embed.
        :param float height: Height of the thumbnail.
        :param str proxy_url: URL to access the thumbnail via Discord's proxy.
        :param float width: Width of the thumbnail.
        """
        pulumi.set(__self__, "url", url)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if proxy_url is not None:
            pulumi.set(__self__, "proxy_url", proxy_url)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL of the thumbnail to be included in the embed.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def height(self) -> Optional[float]:
        """
        Height of the thumbnail.
        """
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="proxyUrl")
    def proxy_url(self) -> Optional[str]:
        """
        URL to access the thumbnail via Discord's proxy.
        """
        return pulumi.get(self, "proxy_url")

    @property
    @pulumi.getter
    def width(self) -> Optional[float]:
        """
        Width of the thumbnail.
        """
        return pulumi.get(self, "width")


@pulumi.output_type
class MessageEmbedVideo(dict):
    def __init__(__self__, *,
                 url: str,
                 height: Optional[float] = None,
                 width: Optional[float] = None):
        """
        :param str url: URL of the video to be included in the embed.
        :param float height: Height of the video.
        :param float width: Width of the video.
        """
        pulumi.set(__self__, "url", url)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL of the video to be included in the embed.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def height(self) -> Optional[float]:
        """
        Height of the video.
        """
        return pulumi.get(self, "height")

    @property
    @pulumi.getter
    def width(self) -> Optional[float]:
        """
        Width of the video.
        """
        return pulumi.get(self, "width")


@pulumi.output_type
class ServerRole(dict):
    def __init__(__self__, *,
                 color: float,
                 hoist: bool,
                 id: str,
                 managed: bool,
                 mentionable: bool,
                 name: str,
                 permissions: float,
                 position: float):
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "hoist", hoist)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "managed", managed)
        pulumi.set(__self__, "mentionable", mentionable)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "permissions", permissions)
        pulumi.set(__self__, "position", position)

    @property
    @pulumi.getter
    def color(self) -> float:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter
    def hoist(self) -> bool:
        return pulumi.get(self, "hoist")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def managed(self) -> bool:
        return pulumi.get(self, "managed")

    @property
    @pulumi.getter
    def mentionable(self) -> bool:
        return pulumi.get(self, "mentionable")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def permissions(self) -> float:
        return pulumi.get(self, "permissions")

    @property
    @pulumi.getter
    def position(self) -> float:
        return pulumi.get(self, "position")


@pulumi.output_type
class GetServerRoleResult(dict):
    def __init__(__self__, *,
                 color: float,
                 hoist: bool,
                 id: str,
                 managed: bool,
                 mentionable: bool,
                 name: str,
                 permissions: float,
                 position: float):
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "hoist", hoist)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "managed", managed)
        pulumi.set(__self__, "mentionable", mentionable)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "permissions", permissions)
        pulumi.set(__self__, "position", position)

    @property
    @pulumi.getter
    def color(self) -> float:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter
    def hoist(self) -> bool:
        return pulumi.get(self, "hoist")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def managed(self) -> bool:
        return pulumi.get(self, "managed")

    @property
    @pulumi.getter
    def mentionable(self) -> bool:
        return pulumi.get(self, "mentionable")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def permissions(self) -> float:
        return pulumi.get(self, "permissions")

    @property
    @pulumi.getter
    def position(self) -> float:
        return pulumi.get(self, "position")


