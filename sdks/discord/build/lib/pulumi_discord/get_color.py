# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetColorResult',
    'AwaitableGetColorResult',
    'get_color',
    'get_color_output',
]

@pulumi.output_type
class GetColorResult:
    """
    A collection of values returned by getColor.
    """
    def __init__(__self__, dec=None, hex=None, id=None, rgb=None):
        if dec and not isinstance(dec, float):
            raise TypeError("Expected argument 'dec' to be a float")
        pulumi.set(__self__, "dec", dec)
        if hex and not isinstance(hex, str):
            raise TypeError("Expected argument 'hex' to be a str")
        pulumi.set(__self__, "hex", hex)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if rgb and not isinstance(rgb, str):
            raise TypeError("Expected argument 'rgb' to be a str")
        pulumi.set(__self__, "rgb", rgb)

    @property
    @pulumi.getter
    def dec(self) -> float:
        return pulumi.get(self, "dec")

    @property
    @pulumi.getter
    def hex(self) -> Optional[str]:
        return pulumi.get(self, "hex")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def rgb(self) -> Optional[str]:
        return pulumi.get(self, "rgb")


class AwaitableGetColorResult(GetColorResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetColorResult(
            dec=self.dec,
            hex=self.hex,
            id=self.id,
            rgb=self.rgb)


def get_color(hex: Optional[str] = None,
              id: Optional[str] = None,
              rgb: Optional[str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetColorResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['hex'] = hex
    __args__['id'] = id
    __args__['rgb'] = rgb
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('discord:index/getColor:getColor', __args__, opts=opts, typ=GetColorResult, package_ref=_utilities.get_package()).value

    return AwaitableGetColorResult(
        dec=pulumi.get(__ret__, 'dec'),
        hex=pulumi.get(__ret__, 'hex'),
        id=pulumi.get(__ret__, 'id'),
        rgb=pulumi.get(__ret__, 'rgb'))
def get_color_output(hex: Optional[pulumi.Input[Optional[str]]] = None,
                     id: Optional[pulumi.Input[Optional[str]]] = None,
                     rgb: Optional[pulumi.Input[Optional[str]]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetColorResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['hex'] = hex
    __args__['id'] = id
    __args__['rgb'] = rgb
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('discord:index/getColor:getColor', __args__, opts=opts, typ=GetColorResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetColorResult(
        dec=pulumi.get(__response__, 'dec'),
        hex=pulumi.get(__response__, 'hex'),
        id=pulumi.get(__response__, 'id'),
        rgb=pulumi.get(__response__, 'rgb')))
