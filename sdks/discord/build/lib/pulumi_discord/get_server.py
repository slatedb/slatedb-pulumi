# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetServerResult',
    'AwaitableGetServerResult',
    'get_server',
    'get_server_output',
]

@pulumi.output_type
class GetServerResult:
    """
    A collection of values returned by getServer.
    """
    def __init__(__self__, afk_channel_id=None, afk_timeout=None, default_message_notifications=None, explicit_content_filter=None, icon_hash=None, id=None, name=None, owner_id=None, region=None, roles=None, server_id=None, splash_hash=None, verification_level=None):
        if afk_channel_id and not isinstance(afk_channel_id, float):
            raise TypeError("Expected argument 'afk_channel_id' to be a float")
        pulumi.set(__self__, "afk_channel_id", afk_channel_id)
        if afk_timeout and not isinstance(afk_timeout, float):
            raise TypeError("Expected argument 'afk_timeout' to be a float")
        pulumi.set(__self__, "afk_timeout", afk_timeout)
        if default_message_notifications and not isinstance(default_message_notifications, float):
            raise TypeError("Expected argument 'default_message_notifications' to be a float")
        pulumi.set(__self__, "default_message_notifications", default_message_notifications)
        if explicit_content_filter and not isinstance(explicit_content_filter, float):
            raise TypeError("Expected argument 'explicit_content_filter' to be a float")
        pulumi.set(__self__, "explicit_content_filter", explicit_content_filter)
        if icon_hash and not isinstance(icon_hash, str):
            raise TypeError("Expected argument 'icon_hash' to be a str")
        pulumi.set(__self__, "icon_hash", icon_hash)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if owner_id and not isinstance(owner_id, str):
            raise TypeError("Expected argument 'owner_id' to be a str")
        pulumi.set(__self__, "owner_id", owner_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if roles and not isinstance(roles, list):
            raise TypeError("Expected argument 'roles' to be a list")
        pulumi.set(__self__, "roles", roles)
        if server_id and not isinstance(server_id, str):
            raise TypeError("Expected argument 'server_id' to be a str")
        pulumi.set(__self__, "server_id", server_id)
        if splash_hash and not isinstance(splash_hash, str):
            raise TypeError("Expected argument 'splash_hash' to be a str")
        pulumi.set(__self__, "splash_hash", splash_hash)
        if verification_level and not isinstance(verification_level, float):
            raise TypeError("Expected argument 'verification_level' to be a float")
        pulumi.set(__self__, "verification_level", verification_level)

    @property
    @pulumi.getter(name="afkChannelId")
    def afk_channel_id(self) -> float:
        return pulumi.get(self, "afk_channel_id")

    @property
    @pulumi.getter(name="afkTimeout")
    def afk_timeout(self) -> float:
        return pulumi.get(self, "afk_timeout")

    @property
    @pulumi.getter(name="defaultMessageNotifications")
    def default_message_notifications(self) -> float:
        return pulumi.get(self, "default_message_notifications")

    @property
    @pulumi.getter(name="explicitContentFilter")
    def explicit_content_filter(self) -> float:
        return pulumi.get(self, "explicit_content_filter")

    @property
    @pulumi.getter(name="iconHash")
    def icon_hash(self) -> str:
        return pulumi.get(self, "icon_hash")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> str:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def roles(self) -> Sequence['outputs.GetServerRoleResult']:
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> Optional[str]:
        return pulumi.get(self, "server_id")

    @property
    @pulumi.getter(name="splashHash")
    def splash_hash(self) -> str:
        return pulumi.get(self, "splash_hash")

    @property
    @pulumi.getter(name="verificationLevel")
    def verification_level(self) -> float:
        return pulumi.get(self, "verification_level")


class AwaitableGetServerResult(GetServerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServerResult(
            afk_channel_id=self.afk_channel_id,
            afk_timeout=self.afk_timeout,
            default_message_notifications=self.default_message_notifications,
            explicit_content_filter=self.explicit_content_filter,
            icon_hash=self.icon_hash,
            id=self.id,
            name=self.name,
            owner_id=self.owner_id,
            region=self.region,
            roles=self.roles,
            server_id=self.server_id,
            splash_hash=self.splash_hash,
            verification_level=self.verification_level)


def get_server(name: Optional[str] = None,
               server_id: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetServerResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['serverId'] = server_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('discord:index/getServer:getServer', __args__, opts=opts, typ=GetServerResult, package_ref=_utilities.get_package()).value

    return AwaitableGetServerResult(
        afk_channel_id=pulumi.get(__ret__, 'afk_channel_id'),
        afk_timeout=pulumi.get(__ret__, 'afk_timeout'),
        default_message_notifications=pulumi.get(__ret__, 'default_message_notifications'),
        explicit_content_filter=pulumi.get(__ret__, 'explicit_content_filter'),
        icon_hash=pulumi.get(__ret__, 'icon_hash'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        owner_id=pulumi.get(__ret__, 'owner_id'),
        region=pulumi.get(__ret__, 'region'),
        roles=pulumi.get(__ret__, 'roles'),
        server_id=pulumi.get(__ret__, 'server_id'),
        splash_hash=pulumi.get(__ret__, 'splash_hash'),
        verification_level=pulumi.get(__ret__, 'verification_level'))
def get_server_output(name: Optional[pulumi.Input[Optional[str]]] = None,
                      server_id: Optional[pulumi.Input[Optional[str]]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetServerResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['serverId'] = server_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('discord:index/getServer:getServer', __args__, opts=opts, typ=GetServerResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetServerResult(
        afk_channel_id=pulumi.get(__response__, 'afk_channel_id'),
        afk_timeout=pulumi.get(__response__, 'afk_timeout'),
        default_message_notifications=pulumi.get(__response__, 'default_message_notifications'),
        explicit_content_filter=pulumi.get(__response__, 'explicit_content_filter'),
        icon_hash=pulumi.get(__response__, 'icon_hash'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        owner_id=pulumi.get(__response__, 'owner_id'),
        region=pulumi.get(__response__, 'region'),
        roles=pulumi.get(__response__, 'roles'),
        server_id=pulumi.get(__response__, 'server_id'),
        splash_hash=pulumi.get(__response__, 'splash_hash'),
        verification_level=pulumi.get(__response__, 'verification_level')))
