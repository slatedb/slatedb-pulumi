# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MessageArgs', 'Message']

@pulumi.input_type
class MessageArgs:
    def __init__(__self__, *,
                 channel_id: pulumi.Input[str],
                 content: Optional[pulumi.Input[str]] = None,
                 edited_timestamp: Optional[pulumi.Input[str]] = None,
                 embed: Optional[pulumi.Input['MessageEmbedArgs']] = None,
                 pinned: Optional[pulumi.Input[bool]] = None,
                 tts: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Message resource.
        :param pulumi.Input[str] channel_id: ID of the channel the message will be in.
        :param pulumi.Input[str] content: Text content of message. At least one of `content` or `embed` must be set.
        :param pulumi.Input[str] edited_timestamp: When the message was edited.
        :param pulumi.Input['MessageEmbedArgs'] embed: An embed block. At least one of `content` or `embed` must be set.
        :param pulumi.Input[bool] pinned: Whether this message is pinned. (default `false`)
        :param pulumi.Input[bool] tts: Whether this message triggers TTS. (default `false`)
        """
        pulumi.set(__self__, "channel_id", channel_id)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if edited_timestamp is not None:
            pulumi.set(__self__, "edited_timestamp", edited_timestamp)
        if embed is not None:
            pulumi.set(__self__, "embed", embed)
        if pinned is not None:
            pulumi.set(__self__, "pinned", pinned)
        if tts is not None:
            pulumi.set(__self__, "tts", tts)

    @property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> pulumi.Input[str]:
        """
        ID of the channel the message will be in.
        """
        return pulumi.get(self, "channel_id")

    @channel_id.setter
    def channel_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "channel_id", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        """
        Text content of message. At least one of `content` or `embed` must be set.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="editedTimestamp")
    def edited_timestamp(self) -> Optional[pulumi.Input[str]]:
        """
        When the message was edited.
        """
        return pulumi.get(self, "edited_timestamp")

    @edited_timestamp.setter
    def edited_timestamp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "edited_timestamp", value)

    @property
    @pulumi.getter
    def embed(self) -> Optional[pulumi.Input['MessageEmbedArgs']]:
        """
        An embed block. At least one of `content` or `embed` must be set.
        """
        return pulumi.get(self, "embed")

    @embed.setter
    def embed(self, value: Optional[pulumi.Input['MessageEmbedArgs']]):
        pulumi.set(self, "embed", value)

    @property
    @pulumi.getter
    def pinned(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this message is pinned. (default `false`)
        """
        return pulumi.get(self, "pinned")

    @pinned.setter
    def pinned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pinned", value)

    @property
    @pulumi.getter
    def tts(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this message triggers TTS. (default `false`)
        """
        return pulumi.get(self, "tts")

    @tts.setter
    def tts(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tts", value)


@pulumi.input_type
class _MessageState:
    def __init__(__self__, *,
                 author: Optional[pulumi.Input[str]] = None,
                 channel_id: Optional[pulumi.Input[str]] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 edited_timestamp: Optional[pulumi.Input[str]] = None,
                 embed: Optional[pulumi.Input['MessageEmbedArgs']] = None,
                 pinned: Optional[pulumi.Input[bool]] = None,
                 server_id: Optional[pulumi.Input[str]] = None,
                 timestamp: Optional[pulumi.Input[str]] = None,
                 tts: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[float]] = None):
        """
        Input properties used for looking up and filtering Message resources.
        :param pulumi.Input[str] author: ID of the user who wrote the message.
        :param pulumi.Input[str] channel_id: ID of the channel the message will be in.
        :param pulumi.Input[str] content: Text content of message. At least one of `content` or `embed` must be set.
        :param pulumi.Input[str] edited_timestamp: When the message was edited.
        :param pulumi.Input['MessageEmbedArgs'] embed: An embed block. At least one of `content` or `embed` must be set.
        :param pulumi.Input[bool] pinned: Whether this message is pinned. (default `false`)
        :param pulumi.Input[str] server_id: ID of the server this message is in.
        :param pulumi.Input[str] timestamp: When the message was sent.
        :param pulumi.Input[bool] tts: Whether this message triggers TTS. (default `false`)
        :param pulumi.Input[float] type: The type of the message.
        """
        if author is not None:
            pulumi.set(__self__, "author", author)
        if channel_id is not None:
            pulumi.set(__self__, "channel_id", channel_id)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if edited_timestamp is not None:
            pulumi.set(__self__, "edited_timestamp", edited_timestamp)
        if embed is not None:
            pulumi.set(__self__, "embed", embed)
        if pinned is not None:
            pulumi.set(__self__, "pinned", pinned)
        if server_id is not None:
            pulumi.set(__self__, "server_id", server_id)
        if timestamp is not None:
            pulumi.set(__self__, "timestamp", timestamp)
        if tts is not None:
            pulumi.set(__self__, "tts", tts)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def author(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the user who wrote the message.
        """
        return pulumi.get(self, "author")

    @author.setter
    def author(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "author", value)

    @property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the channel the message will be in.
        """
        return pulumi.get(self, "channel_id")

    @channel_id.setter
    def channel_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_id", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        """
        Text content of message. At least one of `content` or `embed` must be set.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="editedTimestamp")
    def edited_timestamp(self) -> Optional[pulumi.Input[str]]:
        """
        When the message was edited.
        """
        return pulumi.get(self, "edited_timestamp")

    @edited_timestamp.setter
    def edited_timestamp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "edited_timestamp", value)

    @property
    @pulumi.getter
    def embed(self) -> Optional[pulumi.Input['MessageEmbedArgs']]:
        """
        An embed block. At least one of `content` or `embed` must be set.
        """
        return pulumi.get(self, "embed")

    @embed.setter
    def embed(self, value: Optional[pulumi.Input['MessageEmbedArgs']]):
        pulumi.set(self, "embed", value)

    @property
    @pulumi.getter
    def pinned(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this message is pinned. (default `false`)
        """
        return pulumi.get(self, "pinned")

    @pinned.setter
    def pinned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pinned", value)

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the server this message is in.
        """
        return pulumi.get(self, "server_id")

    @server_id.setter
    def server_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_id", value)

    @property
    @pulumi.getter
    def timestamp(self) -> Optional[pulumi.Input[str]]:
        """
        When the message was sent.
        """
        return pulumi.get(self, "timestamp")

    @timestamp.setter
    def timestamp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timestamp", value)

    @property
    @pulumi.getter
    def tts(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this message triggers TTS. (default `false`)
        """
        return pulumi.get(self, "tts")

    @tts.setter
    def tts(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tts", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[float]]:
        """
        The type of the message.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "type", value)


class Message(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 channel_id: Optional[pulumi.Input[str]] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 edited_timestamp: Optional[pulumi.Input[str]] = None,
                 embed: Optional[pulumi.Input[Union['MessageEmbedArgs', 'MessageEmbedArgsDict']]] = None,
                 pinned: Optional[pulumi.Input[bool]] = None,
                 tts: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Create a Message resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] channel_id: ID of the channel the message will be in.
        :param pulumi.Input[str] content: Text content of message. At least one of `content` or `embed` must be set.
        :param pulumi.Input[str] edited_timestamp: When the message was edited.
        :param pulumi.Input[Union['MessageEmbedArgs', 'MessageEmbedArgsDict']] embed: An embed block. At least one of `content` or `embed` must be set.
        :param pulumi.Input[bool] pinned: Whether this message is pinned. (default `false`)
        :param pulumi.Input[bool] tts: Whether this message triggers TTS. (default `false`)
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MessageArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Message resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param MessageArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MessageArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 channel_id: Optional[pulumi.Input[str]] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 edited_timestamp: Optional[pulumi.Input[str]] = None,
                 embed: Optional[pulumi.Input[Union['MessageEmbedArgs', 'MessageEmbedArgsDict']]] = None,
                 pinned: Optional[pulumi.Input[bool]] = None,
                 tts: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MessageArgs.__new__(MessageArgs)

            if channel_id is None and not opts.urn:
                raise TypeError("Missing required property 'channel_id'")
            __props__.__dict__["channel_id"] = channel_id
            __props__.__dict__["content"] = content
            __props__.__dict__["edited_timestamp"] = edited_timestamp
            __props__.__dict__["embed"] = embed
            __props__.__dict__["pinned"] = pinned
            __props__.__dict__["tts"] = tts
            __props__.__dict__["author"] = None
            __props__.__dict__["server_id"] = None
            __props__.__dict__["timestamp"] = None
            __props__.__dict__["type"] = None
        super(Message, __self__).__init__(
            'discord:index/message:Message',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            author: Optional[pulumi.Input[str]] = None,
            channel_id: Optional[pulumi.Input[str]] = None,
            content: Optional[pulumi.Input[str]] = None,
            edited_timestamp: Optional[pulumi.Input[str]] = None,
            embed: Optional[pulumi.Input[Union['MessageEmbedArgs', 'MessageEmbedArgsDict']]] = None,
            pinned: Optional[pulumi.Input[bool]] = None,
            server_id: Optional[pulumi.Input[str]] = None,
            timestamp: Optional[pulumi.Input[str]] = None,
            tts: Optional[pulumi.Input[bool]] = None,
            type: Optional[pulumi.Input[float]] = None) -> 'Message':
        """
        Get an existing Message resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] author: ID of the user who wrote the message.
        :param pulumi.Input[str] channel_id: ID of the channel the message will be in.
        :param pulumi.Input[str] content: Text content of message. At least one of `content` or `embed` must be set.
        :param pulumi.Input[str] edited_timestamp: When the message was edited.
        :param pulumi.Input[Union['MessageEmbedArgs', 'MessageEmbedArgsDict']] embed: An embed block. At least one of `content` or `embed` must be set.
        :param pulumi.Input[bool] pinned: Whether this message is pinned. (default `false`)
        :param pulumi.Input[str] server_id: ID of the server this message is in.
        :param pulumi.Input[str] timestamp: When the message was sent.
        :param pulumi.Input[bool] tts: Whether this message triggers TTS. (default `false`)
        :param pulumi.Input[float] type: The type of the message.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MessageState.__new__(_MessageState)

        __props__.__dict__["author"] = author
        __props__.__dict__["channel_id"] = channel_id
        __props__.__dict__["content"] = content
        __props__.__dict__["edited_timestamp"] = edited_timestamp
        __props__.__dict__["embed"] = embed
        __props__.__dict__["pinned"] = pinned
        __props__.__dict__["server_id"] = server_id
        __props__.__dict__["timestamp"] = timestamp
        __props__.__dict__["tts"] = tts
        __props__.__dict__["type"] = type
        return Message(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def author(self) -> pulumi.Output[str]:
        """
        ID of the user who wrote the message.
        """
        return pulumi.get(self, "author")

    @property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> pulumi.Output[str]:
        """
        ID of the channel the message will be in.
        """
        return pulumi.get(self, "channel_id")

    @property
    @pulumi.getter
    def content(self) -> pulumi.Output[Optional[str]]:
        """
        Text content of message. At least one of `content` or `embed` must be set.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="editedTimestamp")
    def edited_timestamp(self) -> pulumi.Output[str]:
        """
        When the message was edited.
        """
        return pulumi.get(self, "edited_timestamp")

    @property
    @pulumi.getter
    def embed(self) -> pulumi.Output[Optional['outputs.MessageEmbed']]:
        """
        An embed block. At least one of `content` or `embed` must be set.
        """
        return pulumi.get(self, "embed")

    @property
    @pulumi.getter
    def pinned(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether this message is pinned. (default `false`)
        """
        return pulumi.get(self, "pinned")

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> pulumi.Output[str]:
        """
        ID of the server this message is in.
        """
        return pulumi.get(self, "server_id")

    @property
    @pulumi.getter
    def timestamp(self) -> pulumi.Output[str]:
        """
        When the message was sent.
        """
        return pulumi.get(self, "timestamp")

    @property
    @pulumi.getter
    def tts(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether this message triggers TTS. (default `false`)
        """
        return pulumi.get(self, "tts")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[float]:
        """
        The type of the message.
        """
        return pulumi.get(self, "type")

