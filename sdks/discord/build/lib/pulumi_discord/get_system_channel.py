# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetSystemChannelResult',
    'AwaitableGetSystemChannelResult',
    'get_system_channel',
    'get_system_channel_output',
]

@pulumi.output_type
class GetSystemChannelResult:
    """
    A collection of values returned by getSystemChannel.
    """
    def __init__(__self__, id=None, server_id=None, system_channel_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if server_id and not isinstance(server_id, str):
            raise TypeError("Expected argument 'server_id' to be a str")
        pulumi.set(__self__, "server_id", server_id)
        if system_channel_id and not isinstance(system_channel_id, str):
            raise TypeError("Expected argument 'system_channel_id' to be a str")
        pulumi.set(__self__, "system_channel_id", system_channel_id)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> str:
        return pulumi.get(self, "server_id")

    @property
    @pulumi.getter(name="systemChannelId")
    def system_channel_id(self) -> str:
        return pulumi.get(self, "system_channel_id")


class AwaitableGetSystemChannelResult(GetSystemChannelResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSystemChannelResult(
            id=self.id,
            server_id=self.server_id,
            system_channel_id=self.system_channel_id)


def get_system_channel(server_id: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSystemChannelResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['serverId'] = server_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('discord:index/getSystemChannel:getSystemChannel', __args__, opts=opts, typ=GetSystemChannelResult, package_ref=_utilities.get_package()).value

    return AwaitableGetSystemChannelResult(
        id=pulumi.get(__ret__, 'id'),
        server_id=pulumi.get(__ret__, 'server_id'),
        system_channel_id=pulumi.get(__ret__, 'system_channel_id'))
def get_system_channel_output(server_id: Optional[pulumi.Input[str]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSystemChannelResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['serverId'] = server_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('discord:index/getSystemChannel:getSystemChannel', __args__, opts=opts, typ=GetSystemChannelResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetSystemChannelResult(
        id=pulumi.get(__response__, 'id'),
        server_id=pulumi.get(__response__, 'server_id'),
        system_channel_id=pulumi.get(__response__, 'system_channel_id')))
