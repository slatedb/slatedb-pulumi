# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['RoleArgs', 'Role']

@pulumi.input_type
class RoleArgs:
    def __init__(__self__, *,
                 server_id: pulumi.Input[str],
                 color: Optional[pulumi.Input[float]] = None,
                 hoist: Optional[pulumi.Input[bool]] = None,
                 mentionable: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 permissions: Optional[pulumi.Input[float]] = None,
                 position: Optional[pulumi.Input[float]] = None):
        """
        The set of arguments for constructing a Role resource.
        :param pulumi.Input[str] server_id: Which server the role will be in.
        :param pulumi.Input[float] color: The integer representation of the role color with decimal color code.
        :param pulumi.Input[bool] hoist: Whether the role should be hoisted. (default `false`)
        :param pulumi.Input[bool] mentionable: Whether the role should be mentionable. (default `false`)
        :param pulumi.Input[str] name: The name of the role.
        :param pulumi.Input[float] permissions: The permission bits of the role.
        :param pulumi.Input[float] position: The position of the role. This is reverse indexed, with `@everyone` being `0`.
        """
        pulumi.set(__self__, "server_id", server_id)
        if color is not None:
            pulumi.set(__self__, "color", color)
        if hoist is not None:
            pulumi.set(__self__, "hoist", hoist)
        if mentionable is not None:
            pulumi.set(__self__, "mentionable", mentionable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)
        if position is not None:
            pulumi.set(__self__, "position", position)

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> pulumi.Input[str]:
        """
        Which server the role will be in.
        """
        return pulumi.get(self, "server_id")

    @server_id.setter
    def server_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "server_id", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[float]]:
        """
        The integer representation of the role color with decimal color code.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def hoist(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the role should be hoisted. (default `false`)
        """
        return pulumi.get(self, "hoist")

    @hoist.setter
    def hoist(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hoist", value)

    @property
    @pulumi.getter
    def mentionable(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the role should be mentionable. (default `false`)
        """
        return pulumi.get(self, "mentionable")

    @mentionable.setter
    def mentionable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mentionable", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the role.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def permissions(self) -> Optional[pulumi.Input[float]]:
        """
        The permission bits of the role.
        """
        return pulumi.get(self, "permissions")

    @permissions.setter
    def permissions(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "permissions", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input[float]]:
        """
        The position of the role. This is reverse indexed, with `@everyone` being `0`.
        """
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "position", value)


@pulumi.input_type
class _RoleState:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[float]] = None,
                 hoist: Optional[pulumi.Input[bool]] = None,
                 managed: Optional[pulumi.Input[bool]] = None,
                 mentionable: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 permissions: Optional[pulumi.Input[float]] = None,
                 position: Optional[pulumi.Input[float]] = None,
                 server_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Role resources.
        :param pulumi.Input[float] color: The integer representation of the role color with decimal color code.
        :param pulumi.Input[bool] hoist: Whether the role should be hoisted. (default `false`)
        :param pulumi.Input[bool] managed: Whether this role is managed by another service.
        :param pulumi.Input[bool] mentionable: Whether the role should be mentionable. (default `false`)
        :param pulumi.Input[str] name: The name of the role.
        :param pulumi.Input[float] permissions: The permission bits of the role.
        :param pulumi.Input[float] position: The position of the role. This is reverse indexed, with `@everyone` being `0`.
        :param pulumi.Input[str] server_id: Which server the role will be in.
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if hoist is not None:
            pulumi.set(__self__, "hoist", hoist)
        if managed is not None:
            pulumi.set(__self__, "managed", managed)
        if mentionable is not None:
            pulumi.set(__self__, "mentionable", mentionable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)
        if position is not None:
            pulumi.set(__self__, "position", position)
        if server_id is not None:
            pulumi.set(__self__, "server_id", server_id)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[float]]:
        """
        The integer representation of the role color with decimal color code.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def hoist(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the role should be hoisted. (default `false`)
        """
        return pulumi.get(self, "hoist")

    @hoist.setter
    def hoist(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hoist", value)

    @property
    @pulumi.getter
    def managed(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this role is managed by another service.
        """
        return pulumi.get(self, "managed")

    @managed.setter
    def managed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "managed", value)

    @property
    @pulumi.getter
    def mentionable(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the role should be mentionable. (default `false`)
        """
        return pulumi.get(self, "mentionable")

    @mentionable.setter
    def mentionable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mentionable", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the role.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def permissions(self) -> Optional[pulumi.Input[float]]:
        """
        The permission bits of the role.
        """
        return pulumi.get(self, "permissions")

    @permissions.setter
    def permissions(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "permissions", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input[float]]:
        """
        The position of the role. This is reverse indexed, with `@everyone` being `0`.
        """
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "position", value)

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> Optional[pulumi.Input[str]]:
        """
        Which server the role will be in.
        """
        return pulumi.get(self, "server_id")

    @server_id.setter
    def server_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_id", value)


class Role(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 color: Optional[pulumi.Input[float]] = None,
                 hoist: Optional[pulumi.Input[bool]] = None,
                 mentionable: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 permissions: Optional[pulumi.Input[float]] = None,
                 position: Optional[pulumi.Input[float]] = None,
                 server_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Role resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[float] color: The integer representation of the role color with decimal color code.
        :param pulumi.Input[bool] hoist: Whether the role should be hoisted. (default `false`)
        :param pulumi.Input[bool] mentionable: Whether the role should be mentionable. (default `false`)
        :param pulumi.Input[str] name: The name of the role.
        :param pulumi.Input[float] permissions: The permission bits of the role.
        :param pulumi.Input[float] position: The position of the role. This is reverse indexed, with `@everyone` being `0`.
        :param pulumi.Input[str] server_id: Which server the role will be in.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RoleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Role resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param RoleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RoleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 color: Optional[pulumi.Input[float]] = None,
                 hoist: Optional[pulumi.Input[bool]] = None,
                 mentionable: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 permissions: Optional[pulumi.Input[float]] = None,
                 position: Optional[pulumi.Input[float]] = None,
                 server_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RoleArgs.__new__(RoleArgs)

            __props__.__dict__["color"] = color
            __props__.__dict__["hoist"] = hoist
            __props__.__dict__["mentionable"] = mentionable
            __props__.__dict__["name"] = name
            __props__.__dict__["permissions"] = permissions
            __props__.__dict__["position"] = position
            if server_id is None and not opts.urn:
                raise TypeError("Missing required property 'server_id'")
            __props__.__dict__["server_id"] = server_id
            __props__.__dict__["managed"] = None
        super(Role, __self__).__init__(
            'discord:index/role:Role',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            color: Optional[pulumi.Input[float]] = None,
            hoist: Optional[pulumi.Input[bool]] = None,
            managed: Optional[pulumi.Input[bool]] = None,
            mentionable: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            permissions: Optional[pulumi.Input[float]] = None,
            position: Optional[pulumi.Input[float]] = None,
            server_id: Optional[pulumi.Input[str]] = None) -> 'Role':
        """
        Get an existing Role resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[float] color: The integer representation of the role color with decimal color code.
        :param pulumi.Input[bool] hoist: Whether the role should be hoisted. (default `false`)
        :param pulumi.Input[bool] managed: Whether this role is managed by another service.
        :param pulumi.Input[bool] mentionable: Whether the role should be mentionable. (default `false`)
        :param pulumi.Input[str] name: The name of the role.
        :param pulumi.Input[float] permissions: The permission bits of the role.
        :param pulumi.Input[float] position: The position of the role. This is reverse indexed, with `@everyone` being `0`.
        :param pulumi.Input[str] server_id: Which server the role will be in.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RoleState.__new__(_RoleState)

        __props__.__dict__["color"] = color
        __props__.__dict__["hoist"] = hoist
        __props__.__dict__["managed"] = managed
        __props__.__dict__["mentionable"] = mentionable
        __props__.__dict__["name"] = name
        __props__.__dict__["permissions"] = permissions
        __props__.__dict__["position"] = position
        __props__.__dict__["server_id"] = server_id
        return Role(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Output[Optional[float]]:
        """
        The integer representation of the role color with decimal color code.
        """
        return pulumi.get(self, "color")

    @property
    @pulumi.getter
    def hoist(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether the role should be hoisted. (default `false`)
        """
        return pulumi.get(self, "hoist")

    @property
    @pulumi.getter
    def managed(self) -> pulumi.Output[bool]:
        """
        Whether this role is managed by another service.
        """
        return pulumi.get(self, "managed")

    @property
    @pulumi.getter
    def mentionable(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether the role should be mentionable. (default `false`)
        """
        return pulumi.get(self, "mentionable")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the role.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def permissions(self) -> pulumi.Output[Optional[float]]:
        """
        The permission bits of the role.
        """
        return pulumi.get(self, "permissions")

    @property
    @pulumi.getter
    def position(self) -> pulumi.Output[Optional[float]]:
        """
        The position of the role. This is reverse indexed, with `@everyone` being `0`.
        """
        return pulumi.get(self, "position")

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> pulumi.Output[str]:
        """
        Which server the role will be in.
        """
        return pulumi.get(self, "server_id")

