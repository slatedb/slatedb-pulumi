# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'ManagedServerRoleArgs',
    'ManagedServerRoleArgsDict',
    'MemberRolesRoleArgs',
    'MemberRolesRoleArgsDict',
    'MessageEmbedArgs',
    'MessageEmbedArgsDict',
    'MessageEmbedAuthorArgs',
    'MessageEmbedAuthorArgsDict',
    'MessageEmbedFieldArgs',
    'MessageEmbedFieldArgsDict',
    'MessageEmbedFooterArgs',
    'MessageEmbedFooterArgsDict',
    'MessageEmbedImageArgs',
    'MessageEmbedImageArgsDict',
    'MessageEmbedProviderArgs',
    'MessageEmbedProviderArgsDict',
    'MessageEmbedThumbnailArgs',
    'MessageEmbedThumbnailArgsDict',
    'MessageEmbedVideoArgs',
    'MessageEmbedVideoArgsDict',
    'ServerRoleArgs',
    'ServerRoleArgsDict',
]

MYPY = False

if not MYPY:
    class ManagedServerRoleArgsDict(TypedDict):
        color: pulumi.Input[float]
        hoist: pulumi.Input[bool]
        id: pulumi.Input[str]
        managed: pulumi.Input[bool]
        mentionable: pulumi.Input[bool]
        name: pulumi.Input[str]
        permissions: pulumi.Input[float]
        position: pulumi.Input[float]
elif False:
    ManagedServerRoleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ManagedServerRoleArgs:
    def __init__(__self__, *,
                 color: pulumi.Input[float],
                 hoist: pulumi.Input[bool],
                 id: pulumi.Input[str],
                 managed: pulumi.Input[bool],
                 mentionable: pulumi.Input[bool],
                 name: pulumi.Input[str],
                 permissions: pulumi.Input[float],
                 position: pulumi.Input[float]):
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "hoist", hoist)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "managed", managed)
        pulumi.set(__self__, "mentionable", mentionable)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "permissions", permissions)
        pulumi.set(__self__, "position", position)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Input[float]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: pulumi.Input[float]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def hoist(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "hoist")

    @hoist.setter
    def hoist(self, value: pulumi.Input[bool]):
        pulumi.set(self, "hoist", value)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def managed(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "managed")

    @managed.setter
    def managed(self, value: pulumi.Input[bool]):
        pulumi.set(self, "managed", value)

    @property
    @pulumi.getter
    def mentionable(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "mentionable")

    @mentionable.setter
    def mentionable(self, value: pulumi.Input[bool]):
        pulumi.set(self, "mentionable", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def permissions(self) -> pulumi.Input[float]:
        return pulumi.get(self, "permissions")

    @permissions.setter
    def permissions(self, value: pulumi.Input[float]):
        pulumi.set(self, "permissions", value)

    @property
    @pulumi.getter
    def position(self) -> pulumi.Input[float]:
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: pulumi.Input[float]):
        pulumi.set(self, "position", value)


if not MYPY:
    class MemberRolesRoleArgsDict(TypedDict):
        role_id: pulumi.Input[str]
        """
        The role ID to manage.
        """
        has_role: NotRequired[pulumi.Input[bool]]
        """
        Whether the user should have the role. (default `true`)
        """
elif False:
    MemberRolesRoleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MemberRolesRoleArgs:
    def __init__(__self__, *,
                 role_id: pulumi.Input[str],
                 has_role: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] role_id: The role ID to manage.
        :param pulumi.Input[bool] has_role: Whether the user should have the role. (default `true`)
        """
        pulumi.set(__self__, "role_id", role_id)
        if has_role is not None:
            pulumi.set(__self__, "has_role", has_role)

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> pulumi.Input[str]:
        """
        The role ID to manage.
        """
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_id", value)

    @property
    @pulumi.getter(name="hasRole")
    def has_role(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user should have the role. (default `true`)
        """
        return pulumi.get(self, "has_role")

    @has_role.setter
    def has_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "has_role", value)


if not MYPY:
    class MessageEmbedArgsDict(TypedDict):
        author: NotRequired[pulumi.Input['MessageEmbedAuthorArgsDict']]
        """
        Author of the embed.
        """
        color: NotRequired[pulumi.Input[float]]
        """
        Color of the embed. Must be an integer color code.
        """
        description: NotRequired[pulumi.Input[str]]
        """
        Description of the embed.
        """
        fields: NotRequired[pulumi.Input[Sequence[pulumi.Input['MessageEmbedFieldArgsDict']]]]
        """
        Fields of the embed.
        """
        footer: NotRequired[pulumi.Input['MessageEmbedFooterArgsDict']]
        """
        Footer of the embed.
        """
        image: NotRequired[pulumi.Input['MessageEmbedImageArgsDict']]
        """
        Image to be included in the embed.
        """
        provider: NotRequired[pulumi.Input['MessageEmbedProviderArgsDict']]
        """
        Provider of the embed.
        """
        thumbnail: NotRequired[pulumi.Input['MessageEmbedThumbnailArgsDict']]
        """
        Thumbnail to be included in the embed.
        """
        timestamp: NotRequired[pulumi.Input[str]]
        """
        Timestamp of the embed content.
        """
        title: NotRequired[pulumi.Input[str]]
        """
        Title of the embed.
        """
        url: NotRequired[pulumi.Input[str]]
        """
        URL of the embed.
        """
        video: NotRequired[pulumi.Input['MessageEmbedVideoArgsDict']]
        """
        Video to be included in the embed.
        """
elif False:
    MessageEmbedArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MessageEmbedArgs:
    def __init__(__self__, *,
                 author: Optional[pulumi.Input['MessageEmbedAuthorArgs']] = None,
                 color: Optional[pulumi.Input[float]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 fields: Optional[pulumi.Input[Sequence[pulumi.Input['MessageEmbedFieldArgs']]]] = None,
                 footer: Optional[pulumi.Input['MessageEmbedFooterArgs']] = None,
                 image: Optional[pulumi.Input['MessageEmbedImageArgs']] = None,
                 provider: Optional[pulumi.Input['MessageEmbedProviderArgs']] = None,
                 thumbnail: Optional[pulumi.Input['MessageEmbedThumbnailArgs']] = None,
                 timestamp: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 video: Optional[pulumi.Input['MessageEmbedVideoArgs']] = None):
        """
        :param pulumi.Input['MessageEmbedAuthorArgs'] author: Author of the embed.
        :param pulumi.Input[float] color: Color of the embed. Must be an integer color code.
        :param pulumi.Input[str] description: Description of the embed.
        :param pulumi.Input[Sequence[pulumi.Input['MessageEmbedFieldArgs']]] fields: Fields of the embed.
        :param pulumi.Input['MessageEmbedFooterArgs'] footer: Footer of the embed.
        :param pulumi.Input['MessageEmbedImageArgs'] image: Image to be included in the embed.
        :param pulumi.Input['MessageEmbedProviderArgs'] provider: Provider of the embed.
        :param pulumi.Input['MessageEmbedThumbnailArgs'] thumbnail: Thumbnail to be included in the embed.
        :param pulumi.Input[str] timestamp: Timestamp of the embed content.
        :param pulumi.Input[str] title: Title of the embed.
        :param pulumi.Input[str] url: URL of the embed.
        :param pulumi.Input['MessageEmbedVideoArgs'] video: Video to be included in the embed.
        """
        if author is not None:
            pulumi.set(__self__, "author", author)
        if color is not None:
            pulumi.set(__self__, "color", color)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if fields is not None:
            pulumi.set(__self__, "fields", fields)
        if footer is not None:
            pulumi.set(__self__, "footer", footer)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if provider is not None:
            pulumi.set(__self__, "provider", provider)
        if thumbnail is not None:
            pulumi.set(__self__, "thumbnail", thumbnail)
        if timestamp is not None:
            pulumi.set(__self__, "timestamp", timestamp)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if video is not None:
            pulumi.set(__self__, "video", video)

    @property
    @pulumi.getter
    def author(self) -> Optional[pulumi.Input['MessageEmbedAuthorArgs']]:
        """
        Author of the embed.
        """
        return pulumi.get(self, "author")

    @author.setter
    def author(self, value: Optional[pulumi.Input['MessageEmbedAuthorArgs']]):
        pulumi.set(self, "author", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[float]]:
        """
        Color of the embed. Must be an integer color code.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the embed.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MessageEmbedFieldArgs']]]]:
        """
        Fields of the embed.
        """
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MessageEmbedFieldArgs']]]]):
        pulumi.set(self, "fields", value)

    @property
    @pulumi.getter
    def footer(self) -> Optional[pulumi.Input['MessageEmbedFooterArgs']]:
        """
        Footer of the embed.
        """
        return pulumi.get(self, "footer")

    @footer.setter
    def footer(self, value: Optional[pulumi.Input['MessageEmbedFooterArgs']]):
        pulumi.set(self, "footer", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['MessageEmbedImageArgs']]:
        """
        Image to be included in the embed.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['MessageEmbedImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def provider(self) -> Optional[pulumi.Input['MessageEmbedProviderArgs']]:
        """
        Provider of the embed.
        """
        return pulumi.get(self, "provider")

    @provider.setter
    def provider(self, value: Optional[pulumi.Input['MessageEmbedProviderArgs']]):
        pulumi.set(self, "provider", value)

    @property
    @pulumi.getter
    def thumbnail(self) -> Optional[pulumi.Input['MessageEmbedThumbnailArgs']]:
        """
        Thumbnail to be included in the embed.
        """
        return pulumi.get(self, "thumbnail")

    @thumbnail.setter
    def thumbnail(self, value: Optional[pulumi.Input['MessageEmbedThumbnailArgs']]):
        pulumi.set(self, "thumbnail", value)

    @property
    @pulumi.getter
    def timestamp(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp of the embed content.
        """
        return pulumi.get(self, "timestamp")

    @timestamp.setter
    def timestamp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timestamp", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Title of the embed.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of the embed.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def video(self) -> Optional[pulumi.Input['MessageEmbedVideoArgs']]:
        """
        Video to be included in the embed.
        """
        return pulumi.get(self, "video")

    @video.setter
    def video(self, value: Optional[pulumi.Input['MessageEmbedVideoArgs']]):
        pulumi.set(self, "video", value)


if not MYPY:
    class MessageEmbedAuthorArgsDict(TypedDict):
        icon_url: NotRequired[pulumi.Input[str]]
        """
        URL of the author's icon.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the author.
        """
        proxy_icon_url: NotRequired[pulumi.Input[str]]
        """
        URL to access the author's icon via Discord's proxy.
        """
        url: NotRequired[pulumi.Input[str]]
        """
        URL of the author.
        """
elif False:
    MessageEmbedAuthorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MessageEmbedAuthorArgs:
    def __init__(__self__, *,
                 icon_url: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 proxy_icon_url: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] icon_url: URL of the author's icon.
        :param pulumi.Input[str] name: Name of the author.
        :param pulumi.Input[str] proxy_icon_url: URL to access the author's icon via Discord's proxy.
        :param pulumi.Input[str] url: URL of the author.
        """
        if icon_url is not None:
            pulumi.set(__self__, "icon_url", icon_url)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if proxy_icon_url is not None:
            pulumi.set(__self__, "proxy_icon_url", proxy_icon_url)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="iconUrl")
    def icon_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of the author's icon.
        """
        return pulumi.get(self, "icon_url")

    @icon_url.setter
    def icon_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon_url", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the author.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="proxyIconUrl")
    def proxy_icon_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL to access the author's icon via Discord's proxy.
        """
        return pulumi.get(self, "proxy_icon_url")

    @proxy_icon_url.setter
    def proxy_icon_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_icon_url", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of the author.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


if not MYPY:
    class MessageEmbedFieldArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Name of the field.
        """
        inline: NotRequired[pulumi.Input[bool]]
        """
        Whether the field is inline.
        """
        value: NotRequired[pulumi.Input[str]]
        """
        Value of the field.
        """
elif False:
    MessageEmbedFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MessageEmbedFieldArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 inline: Optional[pulumi.Input[bool]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name of the field.
        :param pulumi.Input[bool] inline: Whether the field is inline.
        :param pulumi.Input[str] value: Value of the field.
        """
        pulumi.set(__self__, "name", name)
        if inline is not None:
            pulumi.set(__self__, "inline", inline)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the field.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def inline(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the field is inline.
        """
        return pulumi.get(self, "inline")

    @inline.setter
    def inline(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "inline", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value of the field.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class MessageEmbedFooterArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text of the footer.
        """
        icon_url: NotRequired[pulumi.Input[str]]
        """
        URL to an icon to be included in the footer.
        """
elif False:
    MessageEmbedFooterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MessageEmbedFooterArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 icon_url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] text: Text of the footer.
        :param pulumi.Input[str] icon_url: URL to an icon to be included in the footer.
        """
        pulumi.set(__self__, "text", text)
        if icon_url is not None:
            pulumi.set(__self__, "icon_url", icon_url)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text of the footer.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter(name="iconUrl")
    def icon_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL to an icon to be included in the footer.
        """
        return pulumi.get(self, "icon_url")

    @icon_url.setter
    def icon_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon_url", value)


if not MYPY:
    class MessageEmbedImageArgsDict(TypedDict):
        url: pulumi.Input[str]
        """
        URL of the image to be included in the embed.
        """
        height: NotRequired[pulumi.Input[float]]
        """
        Height of the image.
        """
        proxy_url: NotRequired[pulumi.Input[str]]
        """
        URL to access the image via Discord's proxy.
        """
        width: NotRequired[pulumi.Input[float]]
        """
        Width of the image.
        """
elif False:
    MessageEmbedImageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MessageEmbedImageArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str],
                 height: Optional[pulumi.Input[float]] = None,
                 proxy_url: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[str] url: URL of the image to be included in the embed.
        :param pulumi.Input[float] height: Height of the image.
        :param pulumi.Input[str] proxy_url: URL to access the image via Discord's proxy.
        :param pulumi.Input[float] width: Width of the image.
        """
        pulumi.set(__self__, "url", url)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if proxy_url is not None:
            pulumi.set(__self__, "proxy_url", proxy_url)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        URL of the image to be included in the embed.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[float]]:
        """
        Height of the image.
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="proxyUrl")
    def proxy_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL to access the image via Discord's proxy.
        """
        return pulumi.get(self, "proxy_url")

    @proxy_url.setter
    def proxy_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_url", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[float]]:
        """
        Width of the image.
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "width", value)


if not MYPY:
    class MessageEmbedProviderArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the provider.
        """
        url: NotRequired[pulumi.Input[str]]
        """
        URL of the provider.
        """
elif False:
    MessageEmbedProviderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MessageEmbedProviderArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name of the provider.
        :param pulumi.Input[str] url: URL of the provider.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the provider.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of the provider.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


if not MYPY:
    class MessageEmbedThumbnailArgsDict(TypedDict):
        url: pulumi.Input[str]
        """
        URL of the thumbnail to be included in the embed.
        """
        height: NotRequired[pulumi.Input[float]]
        """
        Height of the thumbnail.
        """
        proxy_url: NotRequired[pulumi.Input[str]]
        """
        URL to access the thumbnail via Discord's proxy.
        """
        width: NotRequired[pulumi.Input[float]]
        """
        Width of the thumbnail.
        """
elif False:
    MessageEmbedThumbnailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MessageEmbedThumbnailArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str],
                 height: Optional[pulumi.Input[float]] = None,
                 proxy_url: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[str] url: URL of the thumbnail to be included in the embed.
        :param pulumi.Input[float] height: Height of the thumbnail.
        :param pulumi.Input[str] proxy_url: URL to access the thumbnail via Discord's proxy.
        :param pulumi.Input[float] width: Width of the thumbnail.
        """
        pulumi.set(__self__, "url", url)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if proxy_url is not None:
            pulumi.set(__self__, "proxy_url", proxy_url)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        URL of the thumbnail to be included in the embed.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[float]]:
        """
        Height of the thumbnail.
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="proxyUrl")
    def proxy_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL to access the thumbnail via Discord's proxy.
        """
        return pulumi.get(self, "proxy_url")

    @proxy_url.setter
    def proxy_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_url", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[float]]:
        """
        Width of the thumbnail.
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "width", value)


if not MYPY:
    class MessageEmbedVideoArgsDict(TypedDict):
        url: pulumi.Input[str]
        """
        URL of the video to be included in the embed.
        """
        height: NotRequired[pulumi.Input[float]]
        """
        Height of the video.
        """
        width: NotRequired[pulumi.Input[float]]
        """
        Width of the video.
        """
elif False:
    MessageEmbedVideoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MessageEmbedVideoArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str],
                 height: Optional[pulumi.Input[float]] = None,
                 width: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[str] url: URL of the video to be included in the embed.
        :param pulumi.Input[float] height: Height of the video.
        :param pulumi.Input[float] width: Width of the video.
        """
        pulumi.set(__self__, "url", url)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        URL of the video to be included in the embed.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[float]]:
        """
        Height of the video.
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[float]]:
        """
        Width of the video.
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "width", value)


if not MYPY:
    class ServerRoleArgsDict(TypedDict):
        color: pulumi.Input[float]
        hoist: pulumi.Input[bool]
        id: pulumi.Input[str]
        managed: pulumi.Input[bool]
        mentionable: pulumi.Input[bool]
        name: pulumi.Input[str]
        permissions: pulumi.Input[float]
        position: pulumi.Input[float]
elif False:
    ServerRoleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServerRoleArgs:
    def __init__(__self__, *,
                 color: pulumi.Input[float],
                 hoist: pulumi.Input[bool],
                 id: pulumi.Input[str],
                 managed: pulumi.Input[bool],
                 mentionable: pulumi.Input[bool],
                 name: pulumi.Input[str],
                 permissions: pulumi.Input[float],
                 position: pulumi.Input[float]):
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "hoist", hoist)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "managed", managed)
        pulumi.set(__self__, "mentionable", mentionable)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "permissions", permissions)
        pulumi.set(__self__, "position", position)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Input[float]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: pulumi.Input[float]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def hoist(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "hoist")

    @hoist.setter
    def hoist(self, value: pulumi.Input[bool]):
        pulumi.set(self, "hoist", value)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def managed(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "managed")

    @managed.setter
    def managed(self, value: pulumi.Input[bool]):
        pulumi.set(self, "managed", value)

    @property
    @pulumi.getter
    def mentionable(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "mentionable")

    @mentionable.setter
    def mentionable(self, value: pulumi.Input[bool]):
        pulumi.set(self, "mentionable", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def permissions(self) -> pulumi.Input[float]:
        return pulumi.get(self, "permissions")

    @permissions.setter
    def permissions(self, value: pulumi.Input[float]):
        pulumi.set(self, "permissions", value)

    @property
    @pulumi.getter
    def position(self) -> pulumi.Input[float]:
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: pulumi.Input[float]):
        pulumi.set(self, "position", value)


