# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['SystemChannelArgs', 'SystemChannel']

@pulumi.input_type
class SystemChannelArgs:
    def __init__(__self__, *,
                 server_id: pulumi.Input[str],
                 system_channel_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a SystemChannel resource.
        :param pulumi.Input[str] server_id: The ID of the server to manage the system channel for.
        :param pulumi.Input[str] system_channel_id: The ID of the channel that will be used as the system channel.
        """
        pulumi.set(__self__, "server_id", server_id)
        pulumi.set(__self__, "system_channel_id", system_channel_id)

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> pulumi.Input[str]:
        """
        The ID of the server to manage the system channel for.
        """
        return pulumi.get(self, "server_id")

    @server_id.setter
    def server_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "server_id", value)

    @property
    @pulumi.getter(name="systemChannelId")
    def system_channel_id(self) -> pulumi.Input[str]:
        """
        The ID of the channel that will be used as the system channel.
        """
        return pulumi.get(self, "system_channel_id")

    @system_channel_id.setter
    def system_channel_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "system_channel_id", value)


@pulumi.input_type
class _SystemChannelState:
    def __init__(__self__, *,
                 server_id: Optional[pulumi.Input[str]] = None,
                 system_channel_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SystemChannel resources.
        :param pulumi.Input[str] server_id: The ID of the server to manage the system channel for.
        :param pulumi.Input[str] system_channel_id: The ID of the channel that will be used as the system channel.
        """
        if server_id is not None:
            pulumi.set(__self__, "server_id", server_id)
        if system_channel_id is not None:
            pulumi.set(__self__, "system_channel_id", system_channel_id)

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the server to manage the system channel for.
        """
        return pulumi.get(self, "server_id")

    @server_id.setter
    def server_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_id", value)

    @property
    @pulumi.getter(name="systemChannelId")
    def system_channel_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the channel that will be used as the system channel.
        """
        return pulumi.get(self, "system_channel_id")

    @system_channel_id.setter
    def system_channel_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_channel_id", value)


class SystemChannel(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 server_id: Optional[pulumi.Input[str]] = None,
                 system_channel_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a SystemChannel resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] server_id: The ID of the server to manage the system channel for.
        :param pulumi.Input[str] system_channel_id: The ID of the channel that will be used as the system channel.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SystemChannelArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SystemChannel resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SystemChannelArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SystemChannelArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 server_id: Optional[pulumi.Input[str]] = None,
                 system_channel_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SystemChannelArgs.__new__(SystemChannelArgs)

            if server_id is None and not opts.urn:
                raise TypeError("Missing required property 'server_id'")
            __props__.__dict__["server_id"] = server_id
            if system_channel_id is None and not opts.urn:
                raise TypeError("Missing required property 'system_channel_id'")
            __props__.__dict__["system_channel_id"] = system_channel_id
        super(SystemChannel, __self__).__init__(
            'discord:index/systemChannel:SystemChannel',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            server_id: Optional[pulumi.Input[str]] = None,
            system_channel_id: Optional[pulumi.Input[str]] = None) -> 'SystemChannel':
        """
        Get an existing SystemChannel resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] server_id: The ID of the server to manage the system channel for.
        :param pulumi.Input[str] system_channel_id: The ID of the channel that will be used as the system channel.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SystemChannelState.__new__(_SystemChannelState)

        __props__.__dict__["server_id"] = server_id
        __props__.__dict__["system_channel_id"] = system_channel_id
        return SystemChannel(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> pulumi.Output[str]:
        """
        The ID of the server to manage the system channel for.
        """
        return pulumi.get(self, "server_id")

    @property
    @pulumi.getter(name="systemChannelId")
    def system_channel_id(self) -> pulumi.Output[str]:
        """
        The ID of the channel that will be used as the system channel.
        """
        return pulumi.get(self, "system_channel_id")

