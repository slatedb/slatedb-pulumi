# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['InviteArgs', 'Invite']

@pulumi.input_type
class InviteArgs:
    def __init__(__self__, *,
                 channel_id: pulumi.Input[str],
                 max_age: Optional[pulumi.Input[float]] = None,
                 max_uses: Optional[pulumi.Input[float]] = None,
                 temporary: Optional[pulumi.Input[bool]] = None,
                 unique: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Invite resource.
        :param pulumi.Input[str] channel_id: ID of the channel to create an invite for.
        :param pulumi.Input[float] max_age: Age of the invite. `0` for permanent. (default `86400`)
        :param pulumi.Input[float] max_uses: Max number of uses for the invite. `0` (the default) for unlimited.
        :param pulumi.Input[bool] temporary: Whether the invite kicks users after they close Discord. (default `false`)
        :param pulumi.Input[bool] unique: Whether this should create a new invite every time.
        """
        pulumi.set(__self__, "channel_id", channel_id)
        if max_age is not None:
            pulumi.set(__self__, "max_age", max_age)
        if max_uses is not None:
            pulumi.set(__self__, "max_uses", max_uses)
        if temporary is not None:
            pulumi.set(__self__, "temporary", temporary)
        if unique is not None:
            pulumi.set(__self__, "unique", unique)

    @property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> pulumi.Input[str]:
        """
        ID of the channel to create an invite for.
        """
        return pulumi.get(self, "channel_id")

    @channel_id.setter
    def channel_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "channel_id", value)

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[pulumi.Input[float]]:
        """
        Age of the invite. `0` for permanent. (default `86400`)
        """
        return pulumi.get(self, "max_age")

    @max_age.setter
    def max_age(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_age", value)

    @property
    @pulumi.getter(name="maxUses")
    def max_uses(self) -> Optional[pulumi.Input[float]]:
        """
        Max number of uses for the invite. `0` (the default) for unlimited.
        """
        return pulumi.get(self, "max_uses")

    @max_uses.setter
    def max_uses(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_uses", value)

    @property
    @pulumi.getter
    def temporary(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the invite kicks users after they close Discord. (default `false`)
        """
        return pulumi.get(self, "temporary")

    @temporary.setter
    def temporary(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "temporary", value)

    @property
    @pulumi.getter
    def unique(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this should create a new invite every time.
        """
        return pulumi.get(self, "unique")

    @unique.setter
    def unique(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "unique", value)


@pulumi.input_type
class _InviteState:
    def __init__(__self__, *,
                 channel_id: Optional[pulumi.Input[str]] = None,
                 code: Optional[pulumi.Input[str]] = None,
                 max_age: Optional[pulumi.Input[float]] = None,
                 max_uses: Optional[pulumi.Input[float]] = None,
                 temporary: Optional[pulumi.Input[bool]] = None,
                 unique: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering Invite resources.
        :param pulumi.Input[str] channel_id: ID of the channel to create an invite for.
        :param pulumi.Input[str] code: The invite code.
        :param pulumi.Input[float] max_age: Age of the invite. `0` for permanent. (default `86400`)
        :param pulumi.Input[float] max_uses: Max number of uses for the invite. `0` (the default) for unlimited.
        :param pulumi.Input[bool] temporary: Whether the invite kicks users after they close Discord. (default `false`)
        :param pulumi.Input[bool] unique: Whether this should create a new invite every time.
        """
        if channel_id is not None:
            pulumi.set(__self__, "channel_id", channel_id)
        if code is not None:
            pulumi.set(__self__, "code", code)
        if max_age is not None:
            pulumi.set(__self__, "max_age", max_age)
        if max_uses is not None:
            pulumi.set(__self__, "max_uses", max_uses)
        if temporary is not None:
            pulumi.set(__self__, "temporary", temporary)
        if unique is not None:
            pulumi.set(__self__, "unique", unique)

    @property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the channel to create an invite for.
        """
        return pulumi.get(self, "channel_id")

    @channel_id.setter
    def channel_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_id", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[str]]:
        """
        The invite code.
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[pulumi.Input[float]]:
        """
        Age of the invite. `0` for permanent. (default `86400`)
        """
        return pulumi.get(self, "max_age")

    @max_age.setter
    def max_age(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_age", value)

    @property
    @pulumi.getter(name="maxUses")
    def max_uses(self) -> Optional[pulumi.Input[float]]:
        """
        Max number of uses for the invite. `0` (the default) for unlimited.
        """
        return pulumi.get(self, "max_uses")

    @max_uses.setter
    def max_uses(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_uses", value)

    @property
    @pulumi.getter
    def temporary(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the invite kicks users after they close Discord. (default `false`)
        """
        return pulumi.get(self, "temporary")

    @temporary.setter
    def temporary(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "temporary", value)

    @property
    @pulumi.getter
    def unique(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this should create a new invite every time.
        """
        return pulumi.get(self, "unique")

    @unique.setter
    def unique(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "unique", value)


class Invite(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 channel_id: Optional[pulumi.Input[str]] = None,
                 max_age: Optional[pulumi.Input[float]] = None,
                 max_uses: Optional[pulumi.Input[float]] = None,
                 temporary: Optional[pulumi.Input[bool]] = None,
                 unique: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Create a Invite resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] channel_id: ID of the channel to create an invite for.
        :param pulumi.Input[float] max_age: Age of the invite. `0` for permanent. (default `86400`)
        :param pulumi.Input[float] max_uses: Max number of uses for the invite. `0` (the default) for unlimited.
        :param pulumi.Input[bool] temporary: Whether the invite kicks users after they close Discord. (default `false`)
        :param pulumi.Input[bool] unique: Whether this should create a new invite every time.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InviteArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Invite resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param InviteArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InviteArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 channel_id: Optional[pulumi.Input[str]] = None,
                 max_age: Optional[pulumi.Input[float]] = None,
                 max_uses: Optional[pulumi.Input[float]] = None,
                 temporary: Optional[pulumi.Input[bool]] = None,
                 unique: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InviteArgs.__new__(InviteArgs)

            if channel_id is None and not opts.urn:
                raise TypeError("Missing required property 'channel_id'")
            __props__.__dict__["channel_id"] = channel_id
            __props__.__dict__["max_age"] = max_age
            __props__.__dict__["max_uses"] = max_uses
            __props__.__dict__["temporary"] = temporary
            __props__.__dict__["unique"] = unique
            __props__.__dict__["code"] = None
        super(Invite, __self__).__init__(
            'discord:index/invite:Invite',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            channel_id: Optional[pulumi.Input[str]] = None,
            code: Optional[pulumi.Input[str]] = None,
            max_age: Optional[pulumi.Input[float]] = None,
            max_uses: Optional[pulumi.Input[float]] = None,
            temporary: Optional[pulumi.Input[bool]] = None,
            unique: Optional[pulumi.Input[bool]] = None) -> 'Invite':
        """
        Get an existing Invite resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] channel_id: ID of the channel to create an invite for.
        :param pulumi.Input[str] code: The invite code.
        :param pulumi.Input[float] max_age: Age of the invite. `0` for permanent. (default `86400`)
        :param pulumi.Input[float] max_uses: Max number of uses for the invite. `0` (the default) for unlimited.
        :param pulumi.Input[bool] temporary: Whether the invite kicks users after they close Discord. (default `false`)
        :param pulumi.Input[bool] unique: Whether this should create a new invite every time.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InviteState.__new__(_InviteState)

        __props__.__dict__["channel_id"] = channel_id
        __props__.__dict__["code"] = code
        __props__.__dict__["max_age"] = max_age
        __props__.__dict__["max_uses"] = max_uses
        __props__.__dict__["temporary"] = temporary
        __props__.__dict__["unique"] = unique
        return Invite(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> pulumi.Output[str]:
        """
        ID of the channel to create an invite for.
        """
        return pulumi.get(self, "channel_id")

    @property
    @pulumi.getter
    def code(self) -> pulumi.Output[str]:
        """
        The invite code.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> pulumi.Output[Optional[float]]:
        """
        Age of the invite. `0` for permanent. (default `86400`)
        """
        return pulumi.get(self, "max_age")

    @property
    @pulumi.getter(name="maxUses")
    def max_uses(self) -> pulumi.Output[Optional[float]]:
        """
        Max number of uses for the invite. `0` (the default) for unlimited.
        """
        return pulumi.get(self, "max_uses")

    @property
    @pulumi.getter
    def temporary(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether the invite kicks users after they close Discord. (default `false`)
        """
        return pulumi.get(self, "temporary")

    @property
    @pulumi.getter
    def unique(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether this should create a new invite every time.
        """
        return pulumi.get(self, "unique")

