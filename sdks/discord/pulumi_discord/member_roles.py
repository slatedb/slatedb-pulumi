# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MemberRolesArgs', 'MemberRoles']

@pulumi.input_type
class MemberRolesArgs:
    def __init__(__self__, *,
                 roles: pulumi.Input[Sequence[pulumi.Input['MemberRolesRoleArgs']]],
                 server_id: pulumi.Input[str],
                 user_id: pulumi.Input[str],
                 member_roles_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a MemberRoles resource.
        :param pulumi.Input[Sequence[pulumi.Input['MemberRolesRoleArgs']]] roles: Roles to manage.
        :param pulumi.Input[str] server_id: ID of the server to manage roles in.
        :param pulumi.Input[str] user_id: ID of the user to manage roles for.
        """
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "server_id", server_id)
        pulumi.set(__self__, "user_id", user_id)
        if member_roles_id is not None:
            pulumi.set(__self__, "member_roles_id", member_roles_id)

    @property
    @pulumi.getter
    def roles(self) -> pulumi.Input[Sequence[pulumi.Input['MemberRolesRoleArgs']]]:
        """
        Roles to manage.
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: pulumi.Input[Sequence[pulumi.Input['MemberRolesRoleArgs']]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> pulumi.Input[str]:
        """
        ID of the server to manage roles in.
        """
        return pulumi.get(self, "server_id")

    @server_id.setter
    def server_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "server_id", value)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> pulumi.Input[str]:
        """
        ID of the user to manage roles for.
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_id", value)

    @property
    @pulumi.getter(name="memberRolesId")
    def member_roles_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "member_roles_id")

    @member_roles_id.setter
    def member_roles_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "member_roles_id", value)


@pulumi.input_type
class _MemberRolesState:
    def __init__(__self__, *,
                 member_roles_id: Optional[pulumi.Input[str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input['MemberRolesRoleArgs']]]] = None,
                 server_id: Optional[pulumi.Input[str]] = None,
                 user_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering MemberRoles resources.
        :param pulumi.Input[Sequence[pulumi.Input['MemberRolesRoleArgs']]] roles: Roles to manage.
        :param pulumi.Input[str] server_id: ID of the server to manage roles in.
        :param pulumi.Input[str] user_id: ID of the user to manage roles for.
        """
        if member_roles_id is not None:
            pulumi.set(__self__, "member_roles_id", member_roles_id)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if server_id is not None:
            pulumi.set(__self__, "server_id", server_id)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="memberRolesId")
    def member_roles_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "member_roles_id")

    @member_roles_id.setter
    def member_roles_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "member_roles_id", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MemberRolesRoleArgs']]]]:
        """
        Roles to manage.
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MemberRolesRoleArgs']]]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the server to manage roles in.
        """
        return pulumi.get(self, "server_id")

    @server_id.setter
    def server_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_id", value)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the user to manage roles for.
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_id", value)


class MemberRoles(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 member_roles_id: Optional[pulumi.Input[str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MemberRolesRoleArgs', 'MemberRolesRoleArgsDict']]]]] = None,
                 server_id: Optional[pulumi.Input[str]] = None,
                 user_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a MemberRoles resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['MemberRolesRoleArgs', 'MemberRolesRoleArgsDict']]]] roles: Roles to manage.
        :param pulumi.Input[str] server_id: ID of the server to manage roles in.
        :param pulumi.Input[str] user_id: ID of the user to manage roles for.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MemberRolesArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a MemberRoles resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param MemberRolesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MemberRolesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 member_roles_id: Optional[pulumi.Input[str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MemberRolesRoleArgs', 'MemberRolesRoleArgsDict']]]]] = None,
                 server_id: Optional[pulumi.Input[str]] = None,
                 user_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MemberRolesArgs.__new__(MemberRolesArgs)

            __props__.__dict__["member_roles_id"] = member_roles_id
            if roles is None and not opts.urn:
                raise TypeError("Missing required property 'roles'")
            __props__.__dict__["roles"] = roles
            if server_id is None and not opts.urn:
                raise TypeError("Missing required property 'server_id'")
            __props__.__dict__["server_id"] = server_id
            if user_id is None and not opts.urn:
                raise TypeError("Missing required property 'user_id'")
            __props__.__dict__["user_id"] = user_id
        super(MemberRoles, __self__).__init__(
            'discord:index/memberRoles:MemberRoles',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            member_roles_id: Optional[pulumi.Input[str]] = None,
            roles: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MemberRolesRoleArgs', 'MemberRolesRoleArgsDict']]]]] = None,
            server_id: Optional[pulumi.Input[str]] = None,
            user_id: Optional[pulumi.Input[str]] = None) -> 'MemberRoles':
        """
        Get an existing MemberRoles resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['MemberRolesRoleArgs', 'MemberRolesRoleArgsDict']]]] roles: Roles to manage.
        :param pulumi.Input[str] server_id: ID of the server to manage roles in.
        :param pulumi.Input[str] user_id: ID of the user to manage roles for.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MemberRolesState.__new__(_MemberRolesState)

        __props__.__dict__["member_roles_id"] = member_roles_id
        __props__.__dict__["roles"] = roles
        __props__.__dict__["server_id"] = server_id
        __props__.__dict__["user_id"] = user_id
        return MemberRoles(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="memberRolesId")
    def member_roles_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "member_roles_id")

    @property
    @pulumi.getter
    def roles(self) -> pulumi.Output[Sequence['outputs.MemberRolesRole']]:
        """
        Roles to manage.
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> pulumi.Output[str]:
        """
        ID of the server to manage roles in.
        """
        return pulumi.get(self, "server_id")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> pulumi.Output[str]:
        """
        ID of the user to manage roles for.
        """
        return pulumi.get(self, "user_id")

