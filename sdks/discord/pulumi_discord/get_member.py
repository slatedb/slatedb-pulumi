# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetMemberResult',
    'AwaitableGetMemberResult',
    'get_member',
    'get_member_output',
]

@pulumi.output_type
class GetMemberResult:
    """
    A collection of values returned by getMember.
    """
    def __init__(__self__, avatar=None, discriminator=None, id=None, in_server=None, joined_at=None, nick=None, premium_since=None, roles=None, server_id=None, user_id=None, username=None):
        if avatar and not isinstance(avatar, str):
            raise TypeError("Expected argument 'avatar' to be a str")
        pulumi.set(__self__, "avatar", avatar)
        if discriminator and not isinstance(discriminator, str):
            raise TypeError("Expected argument 'discriminator' to be a str")
        pulumi.set(__self__, "discriminator", discriminator)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if in_server and not isinstance(in_server, bool):
            raise TypeError("Expected argument 'in_server' to be a bool")
        pulumi.set(__self__, "in_server", in_server)
        if joined_at and not isinstance(joined_at, str):
            raise TypeError("Expected argument 'joined_at' to be a str")
        pulumi.set(__self__, "joined_at", joined_at)
        if nick and not isinstance(nick, str):
            raise TypeError("Expected argument 'nick' to be a str")
        pulumi.set(__self__, "nick", nick)
        if premium_since and not isinstance(premium_since, str):
            raise TypeError("Expected argument 'premium_since' to be a str")
        pulumi.set(__self__, "premium_since", premium_since)
        if roles and not isinstance(roles, list):
            raise TypeError("Expected argument 'roles' to be a list")
        pulumi.set(__self__, "roles", roles)
        if server_id and not isinstance(server_id, str):
            raise TypeError("Expected argument 'server_id' to be a str")
        pulumi.set(__self__, "server_id", server_id)
        if user_id and not isinstance(user_id, str):
            raise TypeError("Expected argument 'user_id' to be a str")
        pulumi.set(__self__, "user_id", user_id)
        if username and not isinstance(username, str):
            raise TypeError("Expected argument 'username' to be a str")
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def avatar(self) -> str:
        return pulumi.get(self, "avatar")

    @property
    @pulumi.getter
    @_utilities.deprecated("""Deprecated""")
    def discriminator(self) -> Optional[str]:
        return pulumi.get(self, "discriminator")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inServer")
    def in_server(self) -> bool:
        return pulumi.get(self, "in_server")

    @property
    @pulumi.getter(name="joinedAt")
    def joined_at(self) -> str:
        return pulumi.get(self, "joined_at")

    @property
    @pulumi.getter
    def nick(self) -> str:
        return pulumi.get(self, "nick")

    @property
    @pulumi.getter(name="premiumSince")
    def premium_since(self) -> str:
        return pulumi.get(self, "premium_since")

    @property
    @pulumi.getter
    def roles(self) -> Sequence[str]:
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> str:
        return pulumi.get(self, "server_id")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[str]:
        return pulumi.get(self, "user_id")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


class AwaitableGetMemberResult(GetMemberResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMemberResult(
            avatar=self.avatar,
            discriminator=self.discriminator,
            id=self.id,
            in_server=self.in_server,
            joined_at=self.joined_at,
            nick=self.nick,
            premium_since=self.premium_since,
            roles=self.roles,
            server_id=self.server_id,
            user_id=self.user_id,
            username=self.username)


def get_member(discriminator: Optional[str] = None,
               server_id: Optional[str] = None,
               user_id: Optional[str] = None,
               username: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMemberResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['discriminator'] = discriminator
    __args__['serverId'] = server_id
    __args__['userId'] = user_id
    __args__['username'] = username
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('discord:index/getMember:getMember', __args__, opts=opts, typ=GetMemberResult, package_ref=_utilities.get_package()).value

    return AwaitableGetMemberResult(
        avatar=pulumi.get(__ret__, 'avatar'),
        discriminator=pulumi.get(__ret__, 'discriminator'),
        id=pulumi.get(__ret__, 'id'),
        in_server=pulumi.get(__ret__, 'in_server'),
        joined_at=pulumi.get(__ret__, 'joined_at'),
        nick=pulumi.get(__ret__, 'nick'),
        premium_since=pulumi.get(__ret__, 'premium_since'),
        roles=pulumi.get(__ret__, 'roles'),
        server_id=pulumi.get(__ret__, 'server_id'),
        user_id=pulumi.get(__ret__, 'user_id'),
        username=pulumi.get(__ret__, 'username'))
def get_member_output(discriminator: Optional[pulumi.Input[Optional[str]]] = None,
                      server_id: Optional[pulumi.Input[str]] = None,
                      user_id: Optional[pulumi.Input[Optional[str]]] = None,
                      username: Optional[pulumi.Input[Optional[str]]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMemberResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['discriminator'] = discriminator
    __args__['serverId'] = server_id
    __args__['userId'] = user_id
    __args__['username'] = username
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('discord:index/getMember:getMember', __args__, opts=opts, typ=GetMemberResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetMemberResult(
        avatar=pulumi.get(__response__, 'avatar'),
        discriminator=pulumi.get(__response__, 'discriminator'),
        id=pulumi.get(__response__, 'id'),
        in_server=pulumi.get(__response__, 'in_server'),
        joined_at=pulumi.get(__response__, 'joined_at'),
        nick=pulumi.get(__response__, 'nick'),
        premium_since=pulumi.get(__response__, 'premium_since'),
        roles=pulumi.get(__response__, 'roles'),
        server_id=pulumi.get(__response__, 'server_id'),
        user_id=pulumi.get(__response__, 'user_id'),
        username=pulumi.get(__response__, 'username')))
