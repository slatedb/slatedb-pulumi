# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ManagedServerArgs', 'ManagedServer']

@pulumi.input_type
class ManagedServerArgs:
    def __init__(__self__, *,
                 server_id: pulumi.Input[str],
                 afk_channel_id: Optional[pulumi.Input[str]] = None,
                 afk_timeout: Optional[pulumi.Input[float]] = None,
                 default_message_notifications: Optional[pulumi.Input[float]] = None,
                 explicit_content_filter: Optional[pulumi.Input[float]] = None,
                 icon_data_uri: Optional[pulumi.Input[str]] = None,
                 icon_url: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 splash_data_uri: Optional[pulumi.Input[str]] = None,
                 splash_url: Optional[pulumi.Input[str]] = None,
                 verification_level: Optional[pulumi.Input[float]] = None):
        """
        The set of arguments for constructing a ManagedServer resource.
        :param pulumi.Input[str] server_id: The ID of the server to manage.
        :param pulumi.Input[str] afk_channel_id: ID of the channel AFK users will be moved to.
        :param pulumi.Input[float] afk_timeout: How many seconds before moving an AFK user.
        :param pulumi.Input[float] default_message_notifications: Default message notification settings. (`0` = all messages, `1` = mentions)
        :param pulumi.Input[float] explicit_content_filter: Explicit content filter level of the server.
        :param pulumi.Input[str] icon_data_uri: Data URI of an image to set the server icon to. Overrides `icon_url`.
        :param pulumi.Input[str] icon_url: Remote URL to set the icon of the server to.
        :param pulumi.Input[str] name: Name of the server.
        :param pulumi.Input[str] owner_id: Owner ID of the server. Setting this will transfer ownership.
        :param pulumi.Input[str] region: Region of the server.
        :param pulumi.Input[str] splash_data_uri: Data URI of an image to set the splash image of the server to. Overrides `splash_url`
        :param pulumi.Input[str] splash_url: Remote URL to set the splash image of the server to.
        :param pulumi.Input[float] verification_level: Verification level of the server.
        """
        pulumi.set(__self__, "server_id", server_id)
        if afk_channel_id is not None:
            pulumi.set(__self__, "afk_channel_id", afk_channel_id)
        if afk_timeout is not None:
            pulumi.set(__self__, "afk_timeout", afk_timeout)
        if default_message_notifications is not None:
            pulumi.set(__self__, "default_message_notifications", default_message_notifications)
        if explicit_content_filter is not None:
            pulumi.set(__self__, "explicit_content_filter", explicit_content_filter)
        if icon_data_uri is not None:
            pulumi.set(__self__, "icon_data_uri", icon_data_uri)
        if icon_url is not None:
            pulumi.set(__self__, "icon_url", icon_url)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if splash_data_uri is not None:
            pulumi.set(__self__, "splash_data_uri", splash_data_uri)
        if splash_url is not None:
            pulumi.set(__self__, "splash_url", splash_url)
        if verification_level is not None:
            pulumi.set(__self__, "verification_level", verification_level)

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> pulumi.Input[str]:
        """
        The ID of the server to manage.
        """
        return pulumi.get(self, "server_id")

    @server_id.setter
    def server_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "server_id", value)

    @property
    @pulumi.getter(name="afkChannelId")
    def afk_channel_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the channel AFK users will be moved to.
        """
        return pulumi.get(self, "afk_channel_id")

    @afk_channel_id.setter
    def afk_channel_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "afk_channel_id", value)

    @property
    @pulumi.getter(name="afkTimeout")
    def afk_timeout(self) -> Optional[pulumi.Input[float]]:
        """
        How many seconds before moving an AFK user.
        """
        return pulumi.get(self, "afk_timeout")

    @afk_timeout.setter
    def afk_timeout(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "afk_timeout", value)

    @property
    @pulumi.getter(name="defaultMessageNotifications")
    def default_message_notifications(self) -> Optional[pulumi.Input[float]]:
        """
        Default message notification settings. (`0` = all messages, `1` = mentions)
        """
        return pulumi.get(self, "default_message_notifications")

    @default_message_notifications.setter
    def default_message_notifications(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "default_message_notifications", value)

    @property
    @pulumi.getter(name="explicitContentFilter")
    def explicit_content_filter(self) -> Optional[pulumi.Input[float]]:
        """
        Explicit content filter level of the server.
        """
        return pulumi.get(self, "explicit_content_filter")

    @explicit_content_filter.setter
    def explicit_content_filter(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "explicit_content_filter", value)

    @property
    @pulumi.getter(name="iconDataUri")
    def icon_data_uri(self) -> Optional[pulumi.Input[str]]:
        """
        Data URI of an image to set the server icon to. Overrides `icon_url`.
        """
        return pulumi.get(self, "icon_data_uri")

    @icon_data_uri.setter
    def icon_data_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon_data_uri", value)

    @property
    @pulumi.getter(name="iconUrl")
    def icon_url(self) -> Optional[pulumi.Input[str]]:
        """
        Remote URL to set the icon of the server to.
        """
        return pulumi.get(self, "icon_url")

    @icon_url.setter
    def icon_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon_url", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the server.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[pulumi.Input[str]]:
        """
        Owner ID of the server. Setting this will transfer ownership.
        """
        return pulumi.get(self, "owner_id")

    @owner_id.setter
    def owner_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_id", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Region of the server.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="splashDataUri")
    def splash_data_uri(self) -> Optional[pulumi.Input[str]]:
        """
        Data URI of an image to set the splash image of the server to. Overrides `splash_url`
        """
        return pulumi.get(self, "splash_data_uri")

    @splash_data_uri.setter
    def splash_data_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "splash_data_uri", value)

    @property
    @pulumi.getter(name="splashUrl")
    def splash_url(self) -> Optional[pulumi.Input[str]]:
        """
        Remote URL to set the splash image of the server to.
        """
        return pulumi.get(self, "splash_url")

    @splash_url.setter
    def splash_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "splash_url", value)

    @property
    @pulumi.getter(name="verificationLevel")
    def verification_level(self) -> Optional[pulumi.Input[float]]:
        """
        Verification level of the server.
        """
        return pulumi.get(self, "verification_level")

    @verification_level.setter
    def verification_level(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "verification_level", value)


@pulumi.input_type
class _ManagedServerState:
    def __init__(__self__, *,
                 afk_channel_id: Optional[pulumi.Input[str]] = None,
                 afk_timeout: Optional[pulumi.Input[float]] = None,
                 default_message_notifications: Optional[pulumi.Input[float]] = None,
                 explicit_content_filter: Optional[pulumi.Input[float]] = None,
                 icon_data_uri: Optional[pulumi.Input[str]] = None,
                 icon_hash: Optional[pulumi.Input[str]] = None,
                 icon_url: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedServerRoleArgs']]]] = None,
                 server_id: Optional[pulumi.Input[str]] = None,
                 splash_data_uri: Optional[pulumi.Input[str]] = None,
                 splash_hash: Optional[pulumi.Input[str]] = None,
                 splash_url: Optional[pulumi.Input[str]] = None,
                 verification_level: Optional[pulumi.Input[float]] = None):
        """
        Input properties used for looking up and filtering ManagedServer resources.
        :param pulumi.Input[str] afk_channel_id: ID of the channel AFK users will be moved to.
        :param pulumi.Input[float] afk_timeout: How many seconds before moving an AFK user.
        :param pulumi.Input[float] default_message_notifications: Default message notification settings. (`0` = all messages, `1` = mentions)
        :param pulumi.Input[float] explicit_content_filter: Explicit content filter level of the server.
        :param pulumi.Input[str] icon_data_uri: Data URI of an image to set the server icon to. Overrides `icon_url`.
        :param pulumi.Input[str] icon_hash: Hash of the icon.
        :param pulumi.Input[str] icon_url: Remote URL to set the icon of the server to.
        :param pulumi.Input[str] name: Name of the server.
        :param pulumi.Input[str] owner_id: Owner ID of the server. Setting this will transfer ownership.
        :param pulumi.Input[str] region: Region of the server.
        :param pulumi.Input[Sequence[pulumi.Input['ManagedServerRoleArgs']]] roles: List of roles in the server.
        :param pulumi.Input[str] server_id: The ID of the server to manage.
        :param pulumi.Input[str] splash_data_uri: Data URI of an image to set the splash image of the server to. Overrides `splash_url`
        :param pulumi.Input[str] splash_hash: Hash of the splash.
        :param pulumi.Input[str] splash_url: Remote URL to set the splash image of the server to.
        :param pulumi.Input[float] verification_level: Verification level of the server.
        """
        if afk_channel_id is not None:
            pulumi.set(__self__, "afk_channel_id", afk_channel_id)
        if afk_timeout is not None:
            pulumi.set(__self__, "afk_timeout", afk_timeout)
        if default_message_notifications is not None:
            pulumi.set(__self__, "default_message_notifications", default_message_notifications)
        if explicit_content_filter is not None:
            pulumi.set(__self__, "explicit_content_filter", explicit_content_filter)
        if icon_data_uri is not None:
            pulumi.set(__self__, "icon_data_uri", icon_data_uri)
        if icon_hash is not None:
            pulumi.set(__self__, "icon_hash", icon_hash)
        if icon_url is not None:
            pulumi.set(__self__, "icon_url", icon_url)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if server_id is not None:
            pulumi.set(__self__, "server_id", server_id)
        if splash_data_uri is not None:
            pulumi.set(__self__, "splash_data_uri", splash_data_uri)
        if splash_hash is not None:
            pulumi.set(__self__, "splash_hash", splash_hash)
        if splash_url is not None:
            pulumi.set(__self__, "splash_url", splash_url)
        if verification_level is not None:
            pulumi.set(__self__, "verification_level", verification_level)

    @property
    @pulumi.getter(name="afkChannelId")
    def afk_channel_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the channel AFK users will be moved to.
        """
        return pulumi.get(self, "afk_channel_id")

    @afk_channel_id.setter
    def afk_channel_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "afk_channel_id", value)

    @property
    @pulumi.getter(name="afkTimeout")
    def afk_timeout(self) -> Optional[pulumi.Input[float]]:
        """
        How many seconds before moving an AFK user.
        """
        return pulumi.get(self, "afk_timeout")

    @afk_timeout.setter
    def afk_timeout(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "afk_timeout", value)

    @property
    @pulumi.getter(name="defaultMessageNotifications")
    def default_message_notifications(self) -> Optional[pulumi.Input[float]]:
        """
        Default message notification settings. (`0` = all messages, `1` = mentions)
        """
        return pulumi.get(self, "default_message_notifications")

    @default_message_notifications.setter
    def default_message_notifications(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "default_message_notifications", value)

    @property
    @pulumi.getter(name="explicitContentFilter")
    def explicit_content_filter(self) -> Optional[pulumi.Input[float]]:
        """
        Explicit content filter level of the server.
        """
        return pulumi.get(self, "explicit_content_filter")

    @explicit_content_filter.setter
    def explicit_content_filter(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "explicit_content_filter", value)

    @property
    @pulumi.getter(name="iconDataUri")
    def icon_data_uri(self) -> Optional[pulumi.Input[str]]:
        """
        Data URI of an image to set the server icon to. Overrides `icon_url`.
        """
        return pulumi.get(self, "icon_data_uri")

    @icon_data_uri.setter
    def icon_data_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon_data_uri", value)

    @property
    @pulumi.getter(name="iconHash")
    def icon_hash(self) -> Optional[pulumi.Input[str]]:
        """
        Hash of the icon.
        """
        return pulumi.get(self, "icon_hash")

    @icon_hash.setter
    def icon_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon_hash", value)

    @property
    @pulumi.getter(name="iconUrl")
    def icon_url(self) -> Optional[pulumi.Input[str]]:
        """
        Remote URL to set the icon of the server to.
        """
        return pulumi.get(self, "icon_url")

    @icon_url.setter
    def icon_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon_url", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the server.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[pulumi.Input[str]]:
        """
        Owner ID of the server. Setting this will transfer ownership.
        """
        return pulumi.get(self, "owner_id")

    @owner_id.setter
    def owner_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_id", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Region of the server.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagedServerRoleArgs']]]]:
        """
        List of roles in the server.
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedServerRoleArgs']]]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the server to manage.
        """
        return pulumi.get(self, "server_id")

    @server_id.setter
    def server_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_id", value)

    @property
    @pulumi.getter(name="splashDataUri")
    def splash_data_uri(self) -> Optional[pulumi.Input[str]]:
        """
        Data URI of an image to set the splash image of the server to. Overrides `splash_url`
        """
        return pulumi.get(self, "splash_data_uri")

    @splash_data_uri.setter
    def splash_data_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "splash_data_uri", value)

    @property
    @pulumi.getter(name="splashHash")
    def splash_hash(self) -> Optional[pulumi.Input[str]]:
        """
        Hash of the splash.
        """
        return pulumi.get(self, "splash_hash")

    @splash_hash.setter
    def splash_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "splash_hash", value)

    @property
    @pulumi.getter(name="splashUrl")
    def splash_url(self) -> Optional[pulumi.Input[str]]:
        """
        Remote URL to set the splash image of the server to.
        """
        return pulumi.get(self, "splash_url")

    @splash_url.setter
    def splash_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "splash_url", value)

    @property
    @pulumi.getter(name="verificationLevel")
    def verification_level(self) -> Optional[pulumi.Input[float]]:
        """
        Verification level of the server.
        """
        return pulumi.get(self, "verification_level")

    @verification_level.setter
    def verification_level(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "verification_level", value)


class ManagedServer(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 afk_channel_id: Optional[pulumi.Input[str]] = None,
                 afk_timeout: Optional[pulumi.Input[float]] = None,
                 default_message_notifications: Optional[pulumi.Input[float]] = None,
                 explicit_content_filter: Optional[pulumi.Input[float]] = None,
                 icon_data_uri: Optional[pulumi.Input[str]] = None,
                 icon_url: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 server_id: Optional[pulumi.Input[str]] = None,
                 splash_data_uri: Optional[pulumi.Input[str]] = None,
                 splash_url: Optional[pulumi.Input[str]] = None,
                 verification_level: Optional[pulumi.Input[float]] = None,
                 __props__=None):
        """
        Create a ManagedServer resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] afk_channel_id: ID of the channel AFK users will be moved to.
        :param pulumi.Input[float] afk_timeout: How many seconds before moving an AFK user.
        :param pulumi.Input[float] default_message_notifications: Default message notification settings. (`0` = all messages, `1` = mentions)
        :param pulumi.Input[float] explicit_content_filter: Explicit content filter level of the server.
        :param pulumi.Input[str] icon_data_uri: Data URI of an image to set the server icon to. Overrides `icon_url`.
        :param pulumi.Input[str] icon_url: Remote URL to set the icon of the server to.
        :param pulumi.Input[str] name: Name of the server.
        :param pulumi.Input[str] owner_id: Owner ID of the server. Setting this will transfer ownership.
        :param pulumi.Input[str] region: Region of the server.
        :param pulumi.Input[str] server_id: The ID of the server to manage.
        :param pulumi.Input[str] splash_data_uri: Data URI of an image to set the splash image of the server to. Overrides `splash_url`
        :param pulumi.Input[str] splash_url: Remote URL to set the splash image of the server to.
        :param pulumi.Input[float] verification_level: Verification level of the server.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ManagedServerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ManagedServer resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ManagedServerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ManagedServerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 afk_channel_id: Optional[pulumi.Input[str]] = None,
                 afk_timeout: Optional[pulumi.Input[float]] = None,
                 default_message_notifications: Optional[pulumi.Input[float]] = None,
                 explicit_content_filter: Optional[pulumi.Input[float]] = None,
                 icon_data_uri: Optional[pulumi.Input[str]] = None,
                 icon_url: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 server_id: Optional[pulumi.Input[str]] = None,
                 splash_data_uri: Optional[pulumi.Input[str]] = None,
                 splash_url: Optional[pulumi.Input[str]] = None,
                 verification_level: Optional[pulumi.Input[float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ManagedServerArgs.__new__(ManagedServerArgs)

            __props__.__dict__["afk_channel_id"] = afk_channel_id
            __props__.__dict__["afk_timeout"] = afk_timeout
            __props__.__dict__["default_message_notifications"] = default_message_notifications
            __props__.__dict__["explicit_content_filter"] = explicit_content_filter
            __props__.__dict__["icon_data_uri"] = icon_data_uri
            __props__.__dict__["icon_url"] = icon_url
            __props__.__dict__["name"] = name
            __props__.__dict__["owner_id"] = owner_id
            __props__.__dict__["region"] = region
            if server_id is None and not opts.urn:
                raise TypeError("Missing required property 'server_id'")
            __props__.__dict__["server_id"] = server_id
            __props__.__dict__["splash_data_uri"] = splash_data_uri
            __props__.__dict__["splash_url"] = splash_url
            __props__.__dict__["verification_level"] = verification_level
            __props__.__dict__["icon_hash"] = None
            __props__.__dict__["roles"] = None
            __props__.__dict__["splash_hash"] = None
        super(ManagedServer, __self__).__init__(
            'discord:index/managedServer:ManagedServer',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            afk_channel_id: Optional[pulumi.Input[str]] = None,
            afk_timeout: Optional[pulumi.Input[float]] = None,
            default_message_notifications: Optional[pulumi.Input[float]] = None,
            explicit_content_filter: Optional[pulumi.Input[float]] = None,
            icon_data_uri: Optional[pulumi.Input[str]] = None,
            icon_hash: Optional[pulumi.Input[str]] = None,
            icon_url: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            owner_id: Optional[pulumi.Input[str]] = None,
            region: Optional[pulumi.Input[str]] = None,
            roles: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ManagedServerRoleArgs', 'ManagedServerRoleArgsDict']]]]] = None,
            server_id: Optional[pulumi.Input[str]] = None,
            splash_data_uri: Optional[pulumi.Input[str]] = None,
            splash_hash: Optional[pulumi.Input[str]] = None,
            splash_url: Optional[pulumi.Input[str]] = None,
            verification_level: Optional[pulumi.Input[float]] = None) -> 'ManagedServer':
        """
        Get an existing ManagedServer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] afk_channel_id: ID of the channel AFK users will be moved to.
        :param pulumi.Input[float] afk_timeout: How many seconds before moving an AFK user.
        :param pulumi.Input[float] default_message_notifications: Default message notification settings. (`0` = all messages, `1` = mentions)
        :param pulumi.Input[float] explicit_content_filter: Explicit content filter level of the server.
        :param pulumi.Input[str] icon_data_uri: Data URI of an image to set the server icon to. Overrides `icon_url`.
        :param pulumi.Input[str] icon_hash: Hash of the icon.
        :param pulumi.Input[str] icon_url: Remote URL to set the icon of the server to.
        :param pulumi.Input[str] name: Name of the server.
        :param pulumi.Input[str] owner_id: Owner ID of the server. Setting this will transfer ownership.
        :param pulumi.Input[str] region: Region of the server.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ManagedServerRoleArgs', 'ManagedServerRoleArgsDict']]]] roles: List of roles in the server.
        :param pulumi.Input[str] server_id: The ID of the server to manage.
        :param pulumi.Input[str] splash_data_uri: Data URI of an image to set the splash image of the server to. Overrides `splash_url`
        :param pulumi.Input[str] splash_hash: Hash of the splash.
        :param pulumi.Input[str] splash_url: Remote URL to set the splash image of the server to.
        :param pulumi.Input[float] verification_level: Verification level of the server.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ManagedServerState.__new__(_ManagedServerState)

        __props__.__dict__["afk_channel_id"] = afk_channel_id
        __props__.__dict__["afk_timeout"] = afk_timeout
        __props__.__dict__["default_message_notifications"] = default_message_notifications
        __props__.__dict__["explicit_content_filter"] = explicit_content_filter
        __props__.__dict__["icon_data_uri"] = icon_data_uri
        __props__.__dict__["icon_hash"] = icon_hash
        __props__.__dict__["icon_url"] = icon_url
        __props__.__dict__["name"] = name
        __props__.__dict__["owner_id"] = owner_id
        __props__.__dict__["region"] = region
        __props__.__dict__["roles"] = roles
        __props__.__dict__["server_id"] = server_id
        __props__.__dict__["splash_data_uri"] = splash_data_uri
        __props__.__dict__["splash_hash"] = splash_hash
        __props__.__dict__["splash_url"] = splash_url
        __props__.__dict__["verification_level"] = verification_level
        return ManagedServer(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="afkChannelId")
    def afk_channel_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the channel AFK users will be moved to.
        """
        return pulumi.get(self, "afk_channel_id")

    @property
    @pulumi.getter(name="afkTimeout")
    def afk_timeout(self) -> pulumi.Output[Optional[float]]:
        """
        How many seconds before moving an AFK user.
        """
        return pulumi.get(self, "afk_timeout")

    @property
    @pulumi.getter(name="defaultMessageNotifications")
    def default_message_notifications(self) -> pulumi.Output[Optional[float]]:
        """
        Default message notification settings. (`0` = all messages, `1` = mentions)
        """
        return pulumi.get(self, "default_message_notifications")

    @property
    @pulumi.getter(name="explicitContentFilter")
    def explicit_content_filter(self) -> pulumi.Output[Optional[float]]:
        """
        Explicit content filter level of the server.
        """
        return pulumi.get(self, "explicit_content_filter")

    @property
    @pulumi.getter(name="iconDataUri")
    def icon_data_uri(self) -> pulumi.Output[Optional[str]]:
        """
        Data URI of an image to set the server icon to. Overrides `icon_url`.
        """
        return pulumi.get(self, "icon_data_uri")

    @property
    @pulumi.getter(name="iconHash")
    def icon_hash(self) -> pulumi.Output[str]:
        """
        Hash of the icon.
        """
        return pulumi.get(self, "icon_hash")

    @property
    @pulumi.getter(name="iconUrl")
    def icon_url(self) -> pulumi.Output[Optional[str]]:
        """
        Remote URL to set the icon of the server to.
        """
        return pulumi.get(self, "icon_url")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the server.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> pulumi.Output[str]:
        """
        Owner ID of the server. Setting this will transfer ownership.
        """
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        """
        Region of the server.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def roles(self) -> pulumi.Output[Sequence['outputs.ManagedServerRole']]:
        """
        List of roles in the server.
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> pulumi.Output[str]:
        """
        The ID of the server to manage.
        """
        return pulumi.get(self, "server_id")

    @property
    @pulumi.getter(name="splashDataUri")
    def splash_data_uri(self) -> pulumi.Output[Optional[str]]:
        """
        Data URI of an image to set the splash image of the server to. Overrides `splash_url`
        """
        return pulumi.get(self, "splash_data_uri")

    @property
    @pulumi.getter(name="splashHash")
    def splash_hash(self) -> pulumi.Output[str]:
        """
        Hash of the splash.
        """
        return pulumi.get(self, "splash_hash")

    @property
    @pulumi.getter(name="splashUrl")
    def splash_url(self) -> pulumi.Output[Optional[str]]:
        """
        Remote URL to set the splash image of the server to.
        """
        return pulumi.get(self, "splash_url")

    @property
    @pulumi.getter(name="verificationLevel")
    def verification_level(self) -> pulumi.Output[Optional[float]]:
        """
        Verification level of the server.
        """
        return pulumi.get(self, "verification_level")

