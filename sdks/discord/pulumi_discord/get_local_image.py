# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetLocalImageResult',
    'AwaitableGetLocalImageResult',
    'get_local_image',
    'get_local_image_output',
]

@pulumi.output_type
class GetLocalImageResult:
    """
    A collection of values returned by getLocalImage.
    """
    def __init__(__self__, data_uri=None, file=None, id=None):
        if data_uri and not isinstance(data_uri, str):
            raise TypeError("Expected argument 'data_uri' to be a str")
        pulumi.set(__self__, "data_uri", data_uri)
        if file and not isinstance(file, str):
            raise TypeError("Expected argument 'file' to be a str")
        pulumi.set(__self__, "file", file)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="dataUri")
    def data_uri(self) -> str:
        return pulumi.get(self, "data_uri")

    @property
    @pulumi.getter
    def file(self) -> str:
        return pulumi.get(self, "file")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")


class AwaitableGetLocalImageResult(GetLocalImageResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLocalImageResult(
            data_uri=self.data_uri,
            file=self.file,
            id=self.id)


def get_local_image(file: Optional[str] = None,
                    id: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLocalImageResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['file'] = file
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('discord:index/getLocalImage:getLocalImage', __args__, opts=opts, typ=GetLocalImageResult, package_ref=_utilities.get_package()).value

    return AwaitableGetLocalImageResult(
        data_uri=pulumi.get(__ret__, 'data_uri'),
        file=pulumi.get(__ret__, 'file'),
        id=pulumi.get(__ret__, 'id'))
def get_local_image_output(file: Optional[pulumi.Input[str]] = None,
                           id: Optional[pulumi.Input[Optional[str]]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetLocalImageResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['file'] = file
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('discord:index/getLocalImage:getLocalImage', __args__, opts=opts, typ=GetLocalImageResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetLocalImageResult(
        data_uri=pulumi.get(__response__, 'data_uri'),
        file=pulumi.get(__response__, 'file'),
        id=pulumi.get(__response__, 'id')))
