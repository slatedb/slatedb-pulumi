# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['VoiceChannelArgs', 'VoiceChannel']

@pulumi.input_type
class VoiceChannelArgs:
    def __init__(__self__, *,
                 server_id: pulumi.Input[str],
                 bitrate: Optional[pulumi.Input[float]] = None,
                 category: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 position: Optional[pulumi.Input[float]] = None,
                 sync_perms_with_category: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user_limit: Optional[pulumi.Input[float]] = None):
        """
        The set of arguments for constructing a VoiceChannel resource.
        :param pulumi.Input[str] server_id: ID of server this channel is in.
        :param pulumi.Input[float] bitrate: Bitrate of the channel.
        :param pulumi.Input[str] category: ID of category to place this channel in.
        :param pulumi.Input[str] name: Name of the channel.
        :param pulumi.Input[float] position: Position of the channel, `0`-indexed.
        :param pulumi.Input[bool] sync_perms_with_category: Whether channel permissions should be synced with the category this channel is in.
        :param pulumi.Input[str] type: The type of the channel. This is only for internal use and should never be provided.
        :param pulumi.Input[float] user_limit: User limit of the channel.
        """
        pulumi.set(__self__, "server_id", server_id)
        if bitrate is not None:
            pulumi.set(__self__, "bitrate", bitrate)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if position is not None:
            pulumi.set(__self__, "position", position)
        if sync_perms_with_category is not None:
            pulumi.set(__self__, "sync_perms_with_category", sync_perms_with_category)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_limit is not None:
            pulumi.set(__self__, "user_limit", user_limit)

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> pulumi.Input[str]:
        """
        ID of server this channel is in.
        """
        return pulumi.get(self, "server_id")

    @server_id.setter
    def server_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "server_id", value)

    @property
    @pulumi.getter
    def bitrate(self) -> Optional[pulumi.Input[float]]:
        """
        Bitrate of the channel.
        """
        return pulumi.get(self, "bitrate")

    @bitrate.setter
    def bitrate(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "bitrate", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        ID of category to place this channel in.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the channel.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input[float]]:
        """
        Position of the channel, `0`-indexed.
        """
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "position", value)

    @property
    @pulumi.getter(name="syncPermsWithCategory")
    def sync_perms_with_category(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether channel permissions should be synced with the category this channel is in.
        """
        return pulumi.get(self, "sync_perms_with_category")

    @sync_perms_with_category.setter
    def sync_perms_with_category(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sync_perms_with_category", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the channel. This is only for internal use and should never be provided.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userLimit")
    def user_limit(self) -> Optional[pulumi.Input[float]]:
        """
        User limit of the channel.
        """
        return pulumi.get(self, "user_limit")

    @user_limit.setter
    def user_limit(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "user_limit", value)


@pulumi.input_type
class _VoiceChannelState:
    def __init__(__self__, *,
                 bitrate: Optional[pulumi.Input[float]] = None,
                 category: Optional[pulumi.Input[str]] = None,
                 channel_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 position: Optional[pulumi.Input[float]] = None,
                 server_id: Optional[pulumi.Input[str]] = None,
                 sync_perms_with_category: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user_limit: Optional[pulumi.Input[float]] = None):
        """
        Input properties used for looking up and filtering VoiceChannel resources.
        :param pulumi.Input[float] bitrate: Bitrate of the channel.
        :param pulumi.Input[str] category: ID of category to place this channel in.
        :param pulumi.Input[str] channel_id: The ID of the channel.
        :param pulumi.Input[str] name: Name of the channel.
        :param pulumi.Input[float] position: Position of the channel, `0`-indexed.
        :param pulumi.Input[str] server_id: ID of server this channel is in.
        :param pulumi.Input[bool] sync_perms_with_category: Whether channel permissions should be synced with the category this channel is in.
        :param pulumi.Input[str] type: The type of the channel. This is only for internal use and should never be provided.
        :param pulumi.Input[float] user_limit: User limit of the channel.
        """
        if bitrate is not None:
            pulumi.set(__self__, "bitrate", bitrate)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if channel_id is not None:
            pulumi.set(__self__, "channel_id", channel_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if position is not None:
            pulumi.set(__self__, "position", position)
        if server_id is not None:
            pulumi.set(__self__, "server_id", server_id)
        if sync_perms_with_category is not None:
            pulumi.set(__self__, "sync_perms_with_category", sync_perms_with_category)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_limit is not None:
            pulumi.set(__self__, "user_limit", user_limit)

    @property
    @pulumi.getter
    def bitrate(self) -> Optional[pulumi.Input[float]]:
        """
        Bitrate of the channel.
        """
        return pulumi.get(self, "bitrate")

    @bitrate.setter
    def bitrate(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "bitrate", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        ID of category to place this channel in.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the channel.
        """
        return pulumi.get(self, "channel_id")

    @channel_id.setter
    def channel_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the channel.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input[float]]:
        """
        Position of the channel, `0`-indexed.
        """
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "position", value)

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of server this channel is in.
        """
        return pulumi.get(self, "server_id")

    @server_id.setter
    def server_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_id", value)

    @property
    @pulumi.getter(name="syncPermsWithCategory")
    def sync_perms_with_category(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether channel permissions should be synced with the category this channel is in.
        """
        return pulumi.get(self, "sync_perms_with_category")

    @sync_perms_with_category.setter
    def sync_perms_with_category(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sync_perms_with_category", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the channel. This is only for internal use and should never be provided.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userLimit")
    def user_limit(self) -> Optional[pulumi.Input[float]]:
        """
        User limit of the channel.
        """
        return pulumi.get(self, "user_limit")

    @user_limit.setter
    def user_limit(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "user_limit", value)


class VoiceChannel(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bitrate: Optional[pulumi.Input[float]] = None,
                 category: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 position: Optional[pulumi.Input[float]] = None,
                 server_id: Optional[pulumi.Input[str]] = None,
                 sync_perms_with_category: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user_limit: Optional[pulumi.Input[float]] = None,
                 __props__=None):
        """
        Create a VoiceChannel resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[float] bitrate: Bitrate of the channel.
        :param pulumi.Input[str] category: ID of category to place this channel in.
        :param pulumi.Input[str] name: Name of the channel.
        :param pulumi.Input[float] position: Position of the channel, `0`-indexed.
        :param pulumi.Input[str] server_id: ID of server this channel is in.
        :param pulumi.Input[bool] sync_perms_with_category: Whether channel permissions should be synced with the category this channel is in.
        :param pulumi.Input[str] type: The type of the channel. This is only for internal use and should never be provided.
        :param pulumi.Input[float] user_limit: User limit of the channel.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VoiceChannelArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a VoiceChannel resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VoiceChannelArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VoiceChannelArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bitrate: Optional[pulumi.Input[float]] = None,
                 category: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 position: Optional[pulumi.Input[float]] = None,
                 server_id: Optional[pulumi.Input[str]] = None,
                 sync_perms_with_category: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user_limit: Optional[pulumi.Input[float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VoiceChannelArgs.__new__(VoiceChannelArgs)

            __props__.__dict__["bitrate"] = bitrate
            __props__.__dict__["category"] = category
            __props__.__dict__["name"] = name
            __props__.__dict__["position"] = position
            if server_id is None and not opts.urn:
                raise TypeError("Missing required property 'server_id'")
            __props__.__dict__["server_id"] = server_id
            __props__.__dict__["sync_perms_with_category"] = sync_perms_with_category
            __props__.__dict__["type"] = type
            __props__.__dict__["user_limit"] = user_limit
            __props__.__dict__["channel_id"] = None
        super(VoiceChannel, __self__).__init__(
            'discord:index/voiceChannel:VoiceChannel',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bitrate: Optional[pulumi.Input[float]] = None,
            category: Optional[pulumi.Input[str]] = None,
            channel_id: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            position: Optional[pulumi.Input[float]] = None,
            server_id: Optional[pulumi.Input[str]] = None,
            sync_perms_with_category: Optional[pulumi.Input[bool]] = None,
            type: Optional[pulumi.Input[str]] = None,
            user_limit: Optional[pulumi.Input[float]] = None) -> 'VoiceChannel':
        """
        Get an existing VoiceChannel resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[float] bitrate: Bitrate of the channel.
        :param pulumi.Input[str] category: ID of category to place this channel in.
        :param pulumi.Input[str] channel_id: The ID of the channel.
        :param pulumi.Input[str] name: Name of the channel.
        :param pulumi.Input[float] position: Position of the channel, `0`-indexed.
        :param pulumi.Input[str] server_id: ID of server this channel is in.
        :param pulumi.Input[bool] sync_perms_with_category: Whether channel permissions should be synced with the category this channel is in.
        :param pulumi.Input[str] type: The type of the channel. This is only for internal use and should never be provided.
        :param pulumi.Input[float] user_limit: User limit of the channel.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VoiceChannelState.__new__(_VoiceChannelState)

        __props__.__dict__["bitrate"] = bitrate
        __props__.__dict__["category"] = category
        __props__.__dict__["channel_id"] = channel_id
        __props__.__dict__["name"] = name
        __props__.__dict__["position"] = position
        __props__.__dict__["server_id"] = server_id
        __props__.__dict__["sync_perms_with_category"] = sync_perms_with_category
        __props__.__dict__["type"] = type
        __props__.__dict__["user_limit"] = user_limit
        return VoiceChannel(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def bitrate(self) -> pulumi.Output[Optional[float]]:
        """
        Bitrate of the channel.
        """
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def category(self) -> pulumi.Output[Optional[str]]:
        """
        ID of category to place this channel in.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> pulumi.Output[str]:
        """
        The ID of the channel.
        """
        return pulumi.get(self, "channel_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the channel.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def position(self) -> pulumi.Output[Optional[float]]:
        """
        Position of the channel, `0`-indexed.
        """
        return pulumi.get(self, "position")

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> pulumi.Output[str]:
        """
        ID of server this channel is in.
        """
        return pulumi.get(self, "server_id")

    @property
    @pulumi.getter(name="syncPermsWithCategory")
    def sync_perms_with_category(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether channel permissions should be synced with the category this channel is in.
        """
        return pulumi.get(self, "sync_perms_with_category")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[str]]:
        """
        The type of the channel. This is only for internal use and should never be provided.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userLimit")
    def user_limit(self) -> pulumi.Output[Optional[float]]:
        """
        User limit of the channel.
        """
        return pulumi.get(self, "user_limit")

